
1054398035_final_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e4  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e4c  08006e4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e54  08006e54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000070  08006ecc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08006ecc  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9c6  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d1  00000000  00000000  0002faa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aec  00000000  00000000  00032ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027763  00000000  00000000  000339ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012305  00000000  00000000  0005b10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed479  00000000  00000000  0006d414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004198  00000000  00000000  0015a890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a50 	.word	0x08005a50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005a50 	.word	0x08005a50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	230a      	movs	r3, #10
 800057e:	68b9      	ldr	r1, [r7, #8]
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <_write+0x44>)
 8000582:	f002 ff67 	bl	8003454 <HAL_UART_Transmit>
	while (tx_busy != 0) {/* Wait */}
 8000586:	bf00      	nop
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <_write+0x48>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1fb      	bne.n	8000588 <_write+0x1c>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)ptr, len);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b29b      	uxth	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	68b9      	ldr	r1, [r7, #8]
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <_write+0x44>)
 800059a:	f003 f831 	bl	8003600 <HAL_UART_Transmit_DMA>
  tx_busy = 1;
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <_write+0x48>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
  return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000e0 	.word	0x200000e0
 80005b4:	20000185 	.word	0x20000185

080005b8 <HAL_UART_RxCpltCallback>:

//El dispositivo debe poder recibir comandos desde un computador.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	printf("Received: [%s]\r\n", rx_buffer);
 80005c0:	4906      	ldr	r1, [pc, #24]	; (80005dc <HAL_UART_RxCpltCallback+0x24>)
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <HAL_UART_RxCpltCallback+0x28>)
 80005c4:	f004 fbd0 	bl	8004d68 <iprintf>
	HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	4904      	ldr	r1, [pc, #16]	; (80005dc <HAL_UART_RxCpltCallback+0x24>)
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_UART_RxCpltCallback+0x2c>)
 80005ce:	f002 ffcb 	bl	8003568 <HAL_UART_Receive_IT>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000174 	.word	0x20000174
 80005e0:	08005a68 	.word	0x08005a68
 80005e4:	200000e0 	.word	0x200000e0

080005e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	tx_busy = 0;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_UART_TxCpltCallback+0x1c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000185 	.word	0x20000185

08000608 <main>:
//}
/* USER CODE END 0 */


int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb30 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f834 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8f4 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8c2 	bl	80007a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800061c:	f000 f880 	bl	8000720 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	4910      	ldr	r1, [pc, #64]	; (8000664 <main+0x5c>)
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <main+0x60>)
 8000626:	f002 ff9f 	bl	8003568 <HAL_UART_Receive_IT>
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 800062a:	2210      	movs	r2, #16
 800062c:	490d      	ldr	r1, [pc, #52]	; (8000664 <main+0x5c>)
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <main+0x64>)
 8000630:	f004 f892 	bl	8004758 <ring_buffer_init>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <main+0x68>)
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <main+0x60>)
 800063a:	f002 ff95 	bl	8003568 <HAL_UART_Receive_IT>
//El dispositivo debe mostrar el mensaje "Waiting" en modo normal
  ssd1306_Init();
 800063e:	f004 f8e1 	bl	8004804 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000642:	2000      	movs	r0, #0
 8000644:	f004 f948 	bl	80048d8 <ssd1306_Fill>
  ssd1306_SetCursor(20, 20);
 8000648:	2114      	movs	r1, #20
 800064a:	2014      	movs	r0, #20
 800064c:	f004 fa92 	bl	8004b74 <ssd1306_SetCursor>
  ssd1306_WriteString("Waiting", Font_16x26, White);
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <main+0x6c>)
 8000652:	2301      	movs	r3, #1
 8000654:	ca06      	ldmia	r2, {r1, r2}
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x70>)
 8000658:	f004 fa66 	bl	8004b28 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800065c:	f004 f960 	bl	8004920 <ssd1306_UpdateScreen>
//  keypad_init(); // Initialize the keypad functionality
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x58>
 8000662:	bf00      	nop
 8000664:	20000174 	.word	0x20000174
 8000668:	200000e0 	.word	0x200000e0
 800066c:	20000168 	.word	0x20000168
 8000670:	20000184 	.word	0x20000184
 8000674:	2000000c 	.word	0x2000000c
 8000678:	08005a7c 	.word	0x08005a7c

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fbc1 	bl	8004e12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a2:	f001 fb77 	bl	8001d94 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 f90e 	bl	80008cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fbae 	bl	8001e40 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f000 f8ef 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 ff76 	bl	80025f8 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f8db 	bl	80008cc <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_I2C1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_I2C1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_I2C1_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <MX_I2C1_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_I2C1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <MX_I2C1_Init+0x74>)
 800075c:	f000 fe60 	bl	8001420 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 f8b1 	bl	80008cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_I2C1_Init+0x74>)
 800076e:	f001 fa6b 	bl	8001c48 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f8a8 	bl	80008cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_I2C1_Init+0x74>)
 8000780:	f001 faad 	bl	8001cde <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f89f 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000008c 	.word	0x2000008c
 8000798:	40005400 	.word	0x40005400
 800079c:	10909cec 	.word	0x10909cec

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	f002 fde8 	bl	80033b8 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f86d 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000e0 	.word	0x200000e0
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a2a      	ldr	r2, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f000 fdb7 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_GPIO_Init+0xc8>)
 800089a:	f000 fbff 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089e:	2320      	movs	r3, #32
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fbf0 	bl	800109c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000800 	.word	0x48000800

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0ac      	sub	sp, #176	; 0xb0
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2288      	movs	r2, #136	; 0x88
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f004 fa66 	bl	8004e12 <memset>
  if(hi2c->Instance==I2C1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d13a      	bne.n	80009c6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000954:	2300      	movs	r3, #0
 8000956:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f002 f86f 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000968:	f7ff ffb0 	bl	80008cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000984:	23c0      	movs	r3, #192	; 0xc0
 8000986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098a:	2312      	movs	r3, #18
 800098c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <HAL_I2C_MspInit+0xb8>)
 80009aa:	f000 fb77 	bl	800109c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	37b0      	adds	r7, #176	; 0xb0
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40005400 	.word	0x40005400
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ac      	sub	sp, #176	; 0xb0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2288      	movs	r2, #136	; 0x88
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fa08 	bl	8004e12 <memset>
  if(huart->Instance==USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_UART_MspInit+0xb0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d13b      	bne.n	8000a84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 f811 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff52 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a32:	6593      	str	r3, [r2, #88]	; 0x58
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a70:	2307      	movs	r3, #7
 8000a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fb0c 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	; 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f922 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e00a      	b.n	8000b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afa:	f3af 8000 	nop.w
 8000afe:	4601      	mov	r1, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	b2ca      	uxtb	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf0      	blt.n	8000afa <_read+0x12>
  }

  return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_isatty>:

int _isatty(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f004 f978 	bl	8004eb0 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20018000 	.word	0x20018000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	200006e8 	.word	0x200006e8

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff ffea 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f004 f937 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4e:	f7ff fcdb 	bl	8000608 <main>

08000c52 <LoopForever>:

LoopForever:
    b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	200006e4 	.word	0x200006e4

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_Init+0x3c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_Init+0x3c>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f944 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f80f 	bl	8000cb0 <HAL_InitTick>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	e001      	b.n	8000ca2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c9e:	f7ff fe1b 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40022000 	.word	0x40022000

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_InitTick+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d023      	beq.n	8000d0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_InitTick+0x70>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_InitTick+0x6c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f941 	bl	8000f62 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10f      	bne.n	8000d06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d809      	bhi.n	8000d00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f919 	bl	8000f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_InitTick+0x74>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e007      	b.n	8000d10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e004      	b.n	8000d10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e001      	b.n	8000d10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	2000018c 	.word	0x2000018c

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000018c 	.word	0x2000018c

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff47 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff5c 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffb0 	bl	8000ed0 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_DMA_Start_IT+0x20>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e04b      	b.n	8001032 <HAL_DMA_Start_IT+0xb8>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d13a      	bne.n	8001024 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f831 	bl	800103a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 020e 	orr.w	r2, r2, #14
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e00f      	b.n	8001012 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0204 	bic.w	r2, r2, #4
 8001000:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 020a 	orr.w	r2, r2, #10
 8001010:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e005      	b.n	8001030 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800102c:	2302      	movs	r3, #2
 800102e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001030:	7dfb      	ldrb	r3, [r7, #23]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f003 021c 	and.w	r2, r3, #28
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d108      	bne.n	800107e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800107c:	e007      	b.n	800108e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	60da      	str	r2, [r3, #12]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e17f      	b.n	80013ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8171 	beq.w	80013a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d005      	beq.n	80010dc <HAL_GPIO_Init+0x40>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 0201 	and.w	r2, r3, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b03      	cmp	r3, #3
 8001148:	d118      	bne.n	800117c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b03      	cmp	r3, #3
 8001186:	d017      	beq.n	80011b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d123      	bne.n	800120c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80ac 	beq.w	80013a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <HAL_GPIO_Init+0x330>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	4a5e      	ldr	r2, [pc, #376]	; (80013cc <HAL_GPIO_Init+0x330>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6613      	str	r3, [r2, #96]	; 0x60
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <HAL_GPIO_Init+0x330>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001266:	4a5a      	ldr	r2, [pc, #360]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x242>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_GPIO_Init+0x338>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x23e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4e      	ldr	r2, [pc, #312]	; (80013d8 <HAL_GPIO_Init+0x33c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x23a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4d      	ldr	r2, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x340>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x236>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4c      	ldr	r2, [pc, #304]	; (80013e0 <HAL_GPIO_Init+0x344>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x232>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_GPIO_Init+0x348>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x22e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <HAL_GPIO_Init+0x34c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x22a>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x244>
 80012de:	2300      	movs	r3, #0
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f0:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_GPIO_Init+0x334>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_GPIO_Init+0x350>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <HAL_GPIO_Init+0x350>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_GPIO_Init+0x350>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_GPIO_Init+0x350>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_GPIO_Init+0x350>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001376:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_GPIO_Init+0x350>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_GPIO_Init+0x350>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_GPIO_Init+0x350>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f47f ae78 	bne.w	80010ac <HAL_GPIO_Init+0x10>
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	371c      	adds	r7, #28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	48001000 	.word	0x48001000
 80013e4:	48001400 	.word	0x48001400
 80013e8:	48001800 	.word	0x48001800
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800140c:	e002      	b.n	8001414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e08d      	b.n	800154e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fa6a 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2224      	movs	r2, #36	; 0x24
 8001450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d107      	bne.n	800149a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e006      	b.n	80014a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d108      	bne.n	80014c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	e007      	b.n	80014d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69d9      	ldr	r1, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1a      	ldr	r2, [r3, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4603      	mov	r3, r0
 8001568:	817b      	strh	r3, [r7, #10]
 800156a:	460b      	mov	r3, r1
 800156c:	813b      	strh	r3, [r7, #8]
 800156e:	4613      	mov	r3, r2
 8001570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b20      	cmp	r3, #32
 800157c:	f040 80f9 	bne.w	8001772 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <HAL_I2C_Mem_Write+0x34>
 8001586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0ed      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Mem_Write+0x4e>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e0e6      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ae:	f7ff fbcf 	bl	8000d50 <HAL_GetTick>
 80015b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2319      	movs	r3, #25
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f955 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0d1      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2221      	movs	r2, #33	; 0x21
 80015d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2240      	movs	r2, #64	; 0x40
 80015dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015f8:	88f8      	ldrh	r0, [r7, #6]
 80015fa:	893a      	ldrh	r2, [r7, #8]
 80015fc:	8979      	ldrh	r1, [r7, #10]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4603      	mov	r3, r0
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f8b9 	bl	8001780 <I2C_RequestMemoryWrite>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0a9      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d90e      	bls.n	8001648 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	22ff      	movs	r2, #255	; 0xff
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	b2da      	uxtb	r2, r3
 8001636:	8979      	ldrh	r1, [r7, #10]
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 facf 	bl	8001be4 <I2C_TransferConfig>
 8001646:	e00f      	b.n	8001668 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001656:	b2da      	uxtb	r2, r3
 8001658:	8979      	ldrh	r1, [r7, #10]
 800165a:	2300      	movs	r3, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fabe 	bl	8001be4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f94e 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e07b      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d034      	beq.n	8001720 <HAL_I2C_Mem_Write+0x1c8>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d130      	bne.n	8001720 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	2200      	movs	r2, #0
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f8d1 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e04d      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d90e      	bls.n	8001700 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	22ff      	movs	r2, #255	; 0xff
 80016e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	8979      	ldrh	r1, [r7, #10]
 80016f0:	2300      	movs	r3, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 fa73 	bl	8001be4 <I2C_TransferConfig>
 80016fe:	e00f      	b.n	8001720 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	b2da      	uxtb	r2, r3
 8001710:	8979      	ldrh	r1, [r7, #10]
 8001712:	2300      	movs	r3, #0
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fa62 	bl	8001be4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d19e      	bne.n	8001668 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f934 	bl	800199c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e01a      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2220      	movs	r2, #32
 8001744:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_I2C_Mem_Write+0x224>)
 8001752:	400b      	ands	r3, r1
 8001754:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2220      	movs	r2, #32
 800175a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001772:	2302      	movs	r3, #2
  }
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	fe00e800 	.word	0xfe00e800

08001780 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	817b      	strh	r3, [r7, #10]
 8001792:	460b      	mov	r3, r1
 8001794:	813b      	strh	r3, [r7, #8]
 8001796:	4613      	mov	r3, r2
 8001798:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	8979      	ldrh	r1, [r7, #10]
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <I2C_RequestMemoryWrite+0xa4>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 fa1b 	bl	8001be4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	69b9      	ldr	r1, [r7, #24]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f8ab 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e02c      	b.n	800181c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017c8:	893b      	ldrh	r3, [r7, #8]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
 80017d2:	e015      	b.n	8001800 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017d4:	893b      	ldrh	r3, [r7, #8]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	69b9      	ldr	r1, [r7, #24]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f891 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e012      	b.n	800181c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017f6:	893b      	ldrh	r3, [r7, #8]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2200      	movs	r2, #0
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f830 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	80002000 	.word	0x80002000

08001828 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b02      	cmp	r3, #2
 800183c:	d103      	bne.n	8001846 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d007      	beq.n	8001864 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	619a      	str	r2, [r3, #24]
  }
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001880:	e031      	b.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d02d      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7ff fa61 	bl	8000d50 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d122      	bne.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	4013      	ands	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d113      	bne.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4013      	ands	r3, r2
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	429a      	cmp	r2, r3
 8001902:	d0be      	beq.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800191a:	e033      	b.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f87f 	bl	8001a24 <I2C_IsErrorOccurred>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e031      	b.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001936:	d025      	beq.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001938:	f7ff fa0a 	bl	8000d50 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	429a      	cmp	r2, r3
 8001946:	d302      	bcc.n	800194e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11a      	bne.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b02      	cmp	r3, #2
 800195a:	d013      	beq.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e007      	b.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d1c4      	bne.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a8:	e02f      	b.n	8001a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f838 	bl	8001a24 <I2C_IsErrorOccurred>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e02d      	b.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019be:	f7ff f9c7 	bl	8000d50 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d302      	bcc.n	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d11a      	bne.n	8001a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d013      	beq.n	8001a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f043 0220 	orr.w	r2, r3, #32
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b20      	cmp	r3, #32
 8001a16:	d1c8      	bne.n	80019aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d068      	beq.n	8001b22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2210      	movs	r2, #16
 8001a56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a58:	e049      	b.n	8001aee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d045      	beq.n	8001aee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a62:	f7ff f975 	bl	8000d50 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <I2C_IsErrorOccurred+0x54>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13a      	bne.n	8001aee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9a:	d121      	bne.n	8001ae0 <I2C_IsErrorOccurred+0xbc>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa2:	d01d      	beq.n	8001ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001aa4:	7cfb      	ldrb	r3, [r7, #19]
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d01a      	beq.n	8001ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001aba:	f7ff f949 	bl	8000d50 <HAL_GetTick>
 8001abe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac0:	e00e      	b.n	8001ae0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ac2:	f7ff f945 	bl	8000d50 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b19      	cmp	r3, #25
 8001ace:	d907      	bls.n	8001ae0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001ade:	e006      	b.n	8001aee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	d1e9      	bne.n	8001ac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d003      	beq.n	8001b04 <I2C_IsErrorOccurred+0xe0>
 8001afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0aa      	beq.n	8001a5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2220      	movs	r2, #32
 8001b12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01c      	beq.n	8001bd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fe45 	bl	8001828 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <I2C_IsErrorOccurred+0x1bc>)
 8001baa:	400b      	ands	r3, r1
 8001bac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	fe00e800 	.word	0xfe00e800

08001be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	817b      	strh	r3, [r7, #10]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bf6:	897b      	ldrh	r3, [r7, #10]
 8001bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bfc:	7a7b      	ldrb	r3, [r7, #9]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	0d5b      	lsrs	r3, r3, #21
 8001c1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <I2C_TransferConfig+0x60>)
 8001c24:	430b      	orrs	r3, r1
 8001c26:	43db      	mvns	r3, r3
 8001c28:	ea02 0103 	and.w	r1, r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	03ff63ff 	.word	0x03ff63ff

08001c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d138      	bne.n	8001cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e032      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d139      	bne.n	8001d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e033      	b.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2224      	movs	r2, #36	; 0x24
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000

08001d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da2:	d130      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db0:	d038      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2232      	movs	r2, #50	; 0x32
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9b      	lsrs	r3, r3, #18
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd8:	e002      	b.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dec:	d102      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f2      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e00:	d110      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e00f      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d007      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	431bde83 	.word	0x431bde83

08001e40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e3ca      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e52:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5c:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80e4 	beq.w	800203c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4a>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	f040 808b 	bne.w	8001f98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 8087 	bne.w	8001f98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x62>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e3a2      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_RCC_OscConfig+0x7c>
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eba:	e005      	b.n	8001ec8 <HAL_RCC_OscConfig+0x88>
 8001ebc:	4b7c      	ldr	r3, [pc, #496]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d223      	bcs.n	8001f14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fd55 	bl	8002980 <RCC_SetFlashLatencyFromMSIRange>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e383      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee0:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a72      	ldr	r2, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	496d      	ldr	r1, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efe:	4b6c      	ldr	r3, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	4968      	ldr	r1, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
 8001f12:	e025      	b.n	8001f60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a65      	ldr	r2, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4960      	ldr	r1, [pc, #384]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	495b      	ldr	r1, [pc, #364]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fd15 	bl	8002980 <RCC_SetFlashLatencyFromMSIRange>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e343      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f60:	f000 fc4a 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	4950      	ldr	r1, [pc, #320]	; (80020b4 <HAL_RCC_OscConfig+0x274>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_RCC_OscConfig+0x278>)
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe93 	bl	8000cb0 <HAL_InitTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d052      	beq.n	800203a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	e327      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d032      	beq.n	8002006 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a42      	ldr	r2, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fac:	f7fe fed0 	bl	8000d50 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb4:	f7fe fecc 	bl	8000d50 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e310      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a36      	ldr	r2, [pc, #216]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4931      	ldr	r1, [pc, #196]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	492c      	ldr	r1, [pc, #176]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	e01a      	b.n	800203c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002012:	f7fe fe9d 	bl	8000d50 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201a:	f7fe fe99 	bl	8000d50 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e2dd      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x1da>
 8002038:	e000      	b.n	800203c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d074      	beq.n	8002132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x21a>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d10e      	bne.n	8002072 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d10b      	bne.n	8002072 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d064      	beq.n	8002130 <HAL_RCC_OscConfig+0x2f0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d160      	bne.n	8002130 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e2ba      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x24a>
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x298>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002092:	d115      	bne.n	80020c0 <HAL_RCC_OscConfig+0x280>
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 800209a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a02      	ldr	r2, [pc, #8]	; (80020b0 <HAL_RCC_OscConfig+0x270>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x298>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08005a84 	.word	0x08005a84
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004
 80020c0:	4ba0      	ldr	r3, [pc, #640]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a9f      	ldr	r2, [pc, #636]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b9d      	ldr	r3, [pc, #628]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a9c      	ldr	r2, [pc, #624]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe fe36 	bl	8000d50 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fe32 	bl	8000d50 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e276      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2a8>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fe22 	bl	8000d50 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fe1e 	bl	8000d50 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e262      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x2d0>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d060      	beq.n	8002200 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x310>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d119      	bne.n	800217e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d116      	bne.n	800217e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	4b7c      	ldr	r3, [pc, #496]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x328>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e23f      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	4973      	ldr	r1, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	e040      	b.n	8002200 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002186:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6e      	ldr	r2, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe fddd 	bl	8000d50 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7fe fdd9 	bl	8000d50 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e21d      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b62      	ldr	r3, [pc, #392]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	495f      	ldr	r1, [pc, #380]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
 80021cc:	e018      	b.n	8002200 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5c      	ldr	r2, [pc, #368]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80021d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fdb9 	bl	8000d50 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7fe fdb5 	bl	8000d50 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1f9      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03c      	beq.n	8002286 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01c      	beq.n	800224e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221a:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe fd94 	bl	8000d50 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe fd90 	bl	8000d50 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1d4      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ef      	beq.n	800222c <HAL_RCC_OscConfig+0x3ec>
 800224c:	e01b      	b.n	8002286 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002254:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fd77 	bl	8000d50 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe fd73 	bl	8000d50 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1b7      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ef      	bne.n	8002266 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80a6 	beq.w	80023e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x508>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d118      	bne.n	80022fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_OscConfig+0x508>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x508>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fd3a 	bl	8000d50 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7fe fd36 	bl	8000d50 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e17a      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x508>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <HAL_RCC_OscConfig+0x4d8>
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002316:	e029      	b.n	800236c <HAL_RCC_OscConfig+0x52c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d115      	bne.n	800234c <HAL_RCC_OscConfig+0x50c>
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a03      	ldr	r2, [pc, #12]	; (8002344 <HAL_RCC_OscConfig+0x504>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002340:	e014      	b.n	800236c <HAL_RCC_OscConfig+0x52c>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	4b9c      	ldr	r3, [pc, #624]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a9b      	ldr	r2, [pc, #620]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235c:	4b98      	ldr	r3, [pc, #608]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a97      	ldr	r2, [pc, #604]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d016      	beq.n	80023a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe fcec 	bl	8000d50 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe fce8 	bl	8000d50 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e12a      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ed      	beq.n	800237c <HAL_RCC_OscConfig+0x53c>
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe fcd5 	bl	8000d50 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fcd1 	bl	8000d50 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e113      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c0:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ed      	bne.n	80023aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b7a      	ldr	r3, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a79      	ldr	r2, [pc, #484]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80fe 	beq.w	80025e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	f040 80d0 	bne.w	8002594 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023f4:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	429a      	cmp	r2, r3
 8002406:	d130      	bne.n	800246a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	3b01      	subs	r3, #1
 8002414:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d127      	bne.n	800246a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d11f      	bne.n	800246a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002434:	2a07      	cmp	r2, #7
 8002436:	bf14      	ite	ne
 8002438:	2201      	movne	r2, #1
 800243a:	2200      	moveq	r2, #0
 800243c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243e:	4293      	cmp	r3, r2
 8002440:	d113      	bne.n	800246a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d109      	bne.n	800246a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d06e      	beq.n	8002548 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d069      	beq.n	8002544 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0ad      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002496:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002498:	f7fe fc5a 	bl	8000d50 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fc56 	bl	8000d50 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e09a      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x784>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024ce:	3a01      	subs	r2, #1
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024d8:	0212      	lsls	r2, r2, #8
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024e0:	0852      	lsrs	r2, r2, #1
 80024e2:	3a01      	subs	r2, #1
 80024e4:	0552      	lsls	r2, r2, #21
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ec:	0852      	lsrs	r2, r2, #1
 80024ee:	3a01      	subs	r2, #1
 80024f0:	0652      	lsls	r2, r2, #25
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024f8:	0912      	lsrs	r2, r2, #4
 80024fa:	0452      	lsls	r2, r2, #17
 80024fc:	430a      	orrs	r2, r1
 80024fe:	4930      	ldr	r1, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002500:	4313      	orrs	r3, r2
 8002502:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800251c:	f7fe fc18 	bl	8000d50 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fc14 	bl	8000d50 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e058      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002542:	e050      	b.n	80025e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e04f      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d148      	bne.n	80025e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800255a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800256c:	f7fe fbf0 	bl	8000d50 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fbec 	bl	8000d50 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e030      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x734>
 8002592:	e028      	b.n	80025e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d023      	beq.n	80025e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_RCC_OscConfig+0x780>)
 80025a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fbd3 	bl	8000d50 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	e00c      	b.n	80025c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fbcf 	bl	8000d50 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d905      	bls.n	80025c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e013      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x7b0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ec      	bne.n	80025ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x7b0>)
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	4905      	ldr	r1, [pc, #20]	; (80025f0 <HAL_RCC_OscConfig+0x7b0>)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x7b4>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60cb      	str	r3, [r1, #12]
 80025e0:	e001      	b.n	80025e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	feeefffc 	.word	0xfeeefffc

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0e7      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d910      	bls.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4970      	ldr	r1, [pc, #448]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b6e      	ldr	r3, [pc, #440]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0cf      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d010      	beq.n	800266a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002654:	429a      	cmp	r2, r3
 8002656:	d908      	bls.n	800266a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002658:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4960      	ldr	r1, [pc, #384]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d04c      	beq.n	8002710 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d121      	bne.n	80026ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0a6      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002696:	4b54      	ldr	r3, [pc, #336]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e09a      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ae:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e08e      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e086      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4943      	ldr	r1, [pc, #268]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe fb36 	bl	8000d50 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fb32 	bl	8000d50 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e06e      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002728:	429a      	cmp	r2, r3
 800272a:	d208      	bcs.n	800273e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	492b      	ldr	r1, [pc, #172]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d210      	bcs.n	800276e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 0207 	bic.w	r2, r3, #7
 8002754:	4923      	ldr	r1, [pc, #140]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_ClockConfig+0x1ec>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e036      	b.n	80027dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4918      	ldr	r1, [pc, #96]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4910      	ldr	r1, [pc, #64]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ac:	f000 f824 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	490b      	ldr	r1, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1fc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fa6d 	bl	8000cb0 <HAL_InitTick>
 80027d6:	4603      	mov	r3, r0
 80027d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80027da:	7afb      	ldrb	r3, [r7, #11]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08005a84 	.word	0x08005a84
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x34>
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d121      	bne.n	800286a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d11e      	bne.n	800286a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800282c:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e005      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d102      	bne.n	8002876 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_GetSysClockFreq+0x110>)
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e004      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d101      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_RCC_GetSysClockFreq+0x114>)
 800287e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d134      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0xa6>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d003      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xac>
 800289c:	e005      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_RCC_GetSysClockFreq+0x110>)
 80028a0:	617b      	str	r3, [r7, #20]
      break;
 80028a2:	e005      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_GetSysClockFreq+0x114>)
 80028a6:	617b      	str	r3, [r7, #20]
      break;
 80028a8:	e002      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	617b      	str	r3, [r7, #20]
      break;
 80028ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	3301      	adds	r3, #1
 80028bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	fb03 f202 	mul.w	r2, r3, r2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	0e5b      	lsrs	r3, r3, #25
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	3301      	adds	r3, #1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028f0:	69bb      	ldr	r3, [r7, #24]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	08005a9c 	.word	0x08005a9c
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200

08002910 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_GetHCLKFreq+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800292c:	f7ff fff0 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4904      	ldr	r1, [pc, #16]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	08005a94 	.word	0x08005a94

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002958:	f7ff ffda 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0adb      	lsrs	r3, r3, #11
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCC_GetPCLK2Freq+0x28>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	08005a94 	.word	0x08005a94

08002980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800298c:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002998:	f7ff f9ee 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 800299c:	6178      	str	r0, [r7, #20]
 800299e:	e014      	b.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029b8:	f7ff f9de 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 80029bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d10b      	bne.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d919      	bls.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2ba0      	cmp	r3, #160	; 0xa0
 80029dc:	d902      	bls.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029de:	2302      	movs	r3, #2
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e013      	b.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e4:	2301      	movs	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e010      	b.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d902      	bls.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029f0:	2303      	movs	r3, #3
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	e00a      	b.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b80      	cmp	r3, #128	; 0x80
 80029fa:	d102      	bne.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029fc:	2302      	movs	r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e004      	b.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b70      	cmp	r3, #112	; 0x70
 8002a06:	d101      	bne.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a08:	2301      	movs	r3, #1
 8002a0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 0207 	bic.w	r2, r3, #7
 8002a14:	4909      	ldr	r1, [pc, #36]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40022000 	.word	0x40022000

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d041      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a64:	d02a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a6a:	d824      	bhi.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a70:	d008      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a76:	d81e      	bhi.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a82:	e018      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a84:	4b86      	ldr	r3, [pc, #536]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a85      	ldr	r2, [pc, #532]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a90:	e015      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fabb 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa2:	e00c      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3320      	adds	r3, #32
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fba6 	bl	80031fc <RCCEx_PLLSAI2_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab4:	e003      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	74fb      	strb	r3, [r7, #19]
      break;
 8002aba:	e000      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ac4:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad2:	4973      	ldr	r1, [pc, #460]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ada:	e001      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d041      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002af4:	d02a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002af6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002afa:	d824      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b00:	d008      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b06:	d81e      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b10:	d010      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b12:	e018      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b20:	e015      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fa73 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b32:	e00c      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3320      	adds	r3, #32
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fb5e 	bl	80031fc <RCCEx_PLLSAI2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b44:	e003      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	74fb      	strb	r3, [r7, #19]
      break;
 8002b4a:	e000      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b54:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b62:	494f      	ldr	r1, [pc, #316]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b6a:	e001      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a0 	beq.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00d      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f8c6 	bl	8000d50 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bc6:	e009      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe f8c2 	bl	8000d50 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002bda:	e005      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ef      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d15c      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01f      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d019      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f881 	bl	8000d50 <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c50:	e00b      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe f87d 	bl	8000d50 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d902      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	74fb      	strb	r3, [r7, #19]
            break;
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ec      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c96:	e009      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	74bb      	strb	r3, [r7, #18]
 8002c9c:	e006      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cac:	7c7b      	ldrb	r3, [r7, #17]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b9e      	ldr	r3, [pc, #632]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	4a9d      	ldr	r2, [pc, #628]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cca:	4b98      	ldr	r3, [pc, #608]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f023 0203 	bic.w	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	4994      	ldr	r1, [pc, #592]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cec:	4b8f      	ldr	r3, [pc, #572]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f023 020c 	bic.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	498c      	ldr	r1, [pc, #560]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d0e:	4b87      	ldr	r3, [pc, #540]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4983      	ldr	r1, [pc, #524]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d30:	4b7e      	ldr	r3, [pc, #504]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	497b      	ldr	r1, [pc, #492]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d60:	4972      	ldr	r1, [pc, #456]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d74:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	496a      	ldr	r1, [pc, #424]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	4961      	ldr	r1, [pc, #388]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002db8:	4b5c      	ldr	r3, [pc, #368]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	4959      	ldr	r1, [pc, #356]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	4950      	ldr	r1, [pc, #320]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	4948      	ldr	r1, [pc, #288]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	493f      	ldr	r1, [pc, #252]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d028      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4e:	4937      	ldr	r1, [pc, #220]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	e011      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f8c8 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	491f      	ldr	r1, [pc, #124]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec8:	60d3      	str	r3, [r2, #12]
 8002eca:	e011      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f899 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02b      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1a:	d109      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a02      	ldr	r2, [pc, #8]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	60d3      	str	r3, [r2, #12]
 8002f28:	e014      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f867 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d02f      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6e:	4928      	ldr	r1, [pc, #160]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2102      	movs	r1, #2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f844 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d014      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	74bb      	strb	r3, [r7, #18]
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3320      	adds	r3, #32
 8002faa:	2102      	movs	r1, #2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f925 	bl	80031fc <RCCEx_PLLSAI2_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fda:	490d      	ldr	r1, [pc, #52]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003006:	7cbb      	ldrb	r3, [r7, #18]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000

08003014 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003022:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d018      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800302e:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d10d      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
       ||
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003046:	4b6c      	ldr	r3, [pc, #432]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
       ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d047      	beq.n	80030ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e044      	b.n	80030ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d018      	beq.n	800309a <RCCEx_PLLSAI1_Config+0x86>
 8003068:	2b03      	cmp	r3, #3
 800306a:	d825      	bhi.n	80030b8 <RCCEx_PLLSAI1_Config+0xa4>
 800306c:	2b01      	cmp	r3, #1
 800306e:	d002      	beq.n	8003076 <RCCEx_PLLSAI1_Config+0x62>
 8003070:	2b02      	cmp	r3, #2
 8003072:	d009      	beq.n	8003088 <RCCEx_PLLSAI1_Config+0x74>
 8003074:	e020      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003076:	4b60      	ldr	r3, [pc, #384]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11d      	bne.n	80030be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e01a      	b.n	80030be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003088:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e013      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800309a:	4b57      	ldr	r3, [pc, #348]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030a6:	4b54      	ldr	r3, [pc, #336]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030b6:	e006      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e004      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ce:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	430b      	orrs	r3, r1
 80030e4:	4944      	ldr	r1, [pc, #272]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d17d      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fd fe28 	bl	8000d50 <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003102:	e009      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003104:	f7fd fe24 	bl	8000d50 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	73fb      	strb	r3, [r7, #15]
        break;
 8003116:	e005      	b.n	8003124 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003118:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ef      	bne.n	8003104 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d160      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	0211      	lsls	r1, r2, #8
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	0912      	lsrs	r2, r2, #4
 8003148:	0452      	lsls	r2, r2, #17
 800314a:	430a      	orrs	r2, r1
 800314c:	492a      	ldr	r1, [pc, #168]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	610b      	str	r3, [r1, #16]
 8003152:	e027      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d112      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003162:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	0211      	lsls	r1, r2, #8
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6912      	ldr	r2, [r2, #16]
 8003170:	0852      	lsrs	r2, r2, #1
 8003172:	3a01      	subs	r2, #1
 8003174:	0552      	lsls	r2, r2, #21
 8003176:	430a      	orrs	r2, r1
 8003178:	491f      	ldr	r1, [pc, #124]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]
 800317e:	e011      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003188:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6892      	ldr	r2, [r2, #8]
 8003190:	0211      	lsls	r1, r2, #8
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6952      	ldr	r2, [r2, #20]
 8003196:	0852      	lsrs	r2, r2, #1
 8003198:	3a01      	subs	r2, #1
 800319a:	0652      	lsls	r2, r2, #25
 800319c:	430a      	orrs	r2, r1
 800319e:	4916      	ldr	r1, [pc, #88]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fd fdce 	bl	8000d50 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b6:	e009      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b8:	f7fd fdca 	bl	8000d50 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ca:	e005      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0203 	and.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d10d      	bne.n	8003242 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
       ||
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
       ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d047      	beq.n	80032d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e044      	b.n	80032d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d018      	beq.n	8003282 <RCCEx_PLLSAI2_Config+0x86>
 8003250:	2b03      	cmp	r3, #3
 8003252:	d825      	bhi.n	80032a0 <RCCEx_PLLSAI2_Config+0xa4>
 8003254:	2b01      	cmp	r3, #1
 8003256:	d002      	beq.n	800325e <RCCEx_PLLSAI2_Config+0x62>
 8003258:	2b02      	cmp	r3, #2
 800325a:	d009      	beq.n	8003270 <RCCEx_PLLSAI2_Config+0x74>
 800325c:	e020      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800325e:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326e:	e01a      	b.n	80032a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d116      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003280:	e013      	b.n	80032aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003282:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800329e:	e006      	b.n	80032ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e004      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	430b      	orrs	r3, r1
 80032cc:	4939      	ldr	r1, [pc, #228]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d167      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e4:	f7fd fd34 	bl	8000d50 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032ea:	e009      	b.n	8003300 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032ec:	f7fd fd30 	bl	8000d50 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d902      	bls.n	8003300 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	73fb      	strb	r3, [r7, #15]
        break;
 80032fe:	e005      	b.n	800330c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ef      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d14a      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d111      	bne.n	800333c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6892      	ldr	r2, [r2, #8]
 8003328:	0211      	lsls	r1, r2, #8
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	0912      	lsrs	r2, r2, #4
 8003330:	0452      	lsls	r2, r2, #17
 8003332:	430a      	orrs	r2, r1
 8003334:	491f      	ldr	r1, [pc, #124]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	614b      	str	r3, [r1, #20]
 800333a:	e011      	b.n	8003360 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003344:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6912      	ldr	r2, [r2, #16]
 8003352:	0852      	lsrs	r2, r2, #1
 8003354:	3a01      	subs	r2, #1
 8003356:	0652      	lsls	r2, r2, #25
 8003358:	430a      	orrs	r2, r1
 800335a:	4916      	ldr	r1, [pc, #88]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335c:	4313      	orrs	r3, r2
 800335e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fd fcf0 	bl	8000d50 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003374:	f7fd fcec 	bl	8000d50 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
          break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ef      	beq.n	8003374 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e040      	b.n	800344c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fafe 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fc52 	bl	8003ca8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f997 	bl	8003738 <UART_SetConfig>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e01b      	b.n	800344c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fcd1 	bl	8003dec <UART_CheckIdleState>
 800344a:	4603      	mov	r3, r0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003468:	2b20      	cmp	r3, #32
 800346a:	d178      	bne.n	800355e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_UART_Transmit+0x24>
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e071      	b.n	8003560 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2221      	movs	r2, #33	; 0x21
 8003488:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348a:	f7fd fc61 	bl	8000d50 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d108      	bne.n	80034bc <HAL_UART_Transmit+0x68>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e003      	b.n	80034c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034c4:	e030      	b.n	8003528 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fd33 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e03c      	b.n	8003560 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	881a      	ldrh	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f8:	b292      	uxth	r2, r2
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	3302      	adds	r3, #2
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e008      	b.n	8003516 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b292      	uxth	r2, r2
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	3301      	adds	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1c8      	bne.n	80034c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2200      	movs	r2, #0
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fcfc 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e005      	b.n	8003560 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357c:	2b20      	cmp	r3, #32
 800357e:	d137      	bne.n	80035f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Receive_IT+0x24>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e030      	b.n	80035f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_UART_Receive_IT+0x94>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01f      	beq.n	80035e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	613b      	str	r3, [r7, #16]
   return(result);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e6      	bne.n	80035ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fd10 	bl	800400c <UART_Start_Receive_IT>
 80035ec:	4603      	mov	r3, r0
 80035ee:	e000      	b.n	80035f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40008000 	.word	0x40008000

08003600 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003612:	2b20      	cmp	r3, #32
 8003614:	d165      	bne.n	80036e2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_UART_Transmit_DMA+0x22>
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e05e      	b.n	80036e4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2221      	movs	r2, #33	; 0x21
 8003648:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	2b00      	cmp	r3, #0
 8003650:	d027      	beq.n	80036a2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_UART_Transmit_DMA+0xec>)
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <HAL_UART_Transmit_DMA+0xf0>)
 8003660:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_UART_Transmit_DMA+0xf4>)
 8003668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	2200      	movs	r2, #0
 8003670:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	4619      	mov	r1, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3328      	adds	r3, #40	; 0x28
 8003682:	461a      	mov	r2, r3
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	f7fd fc78 	bl	8000f7a <HAL_DMA_Start_IT>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2210      	movs	r2, #16
 8003694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e020      	b.n	80036e4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3308      	adds	r3, #8
 80036c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ca:	623a      	str	r2, [r7, #32]
 80036cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	080042ad 	.word	0x080042ad
 80036f0:	08004347 	.word	0x08004347
 80036f4:	08004363 	.word	0x08004363

080036f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	b08a      	sub	sp, #40	; 0x28
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4313      	orrs	r3, r2
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4ba4      	ldr	r3, [pc, #656]	; (80039f8 <UART_SetConfig+0x2c0>)
 8003768:	4013      	ands	r3, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003770:	430b      	orrs	r3, r1
 8003772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a99      	ldr	r2, [pc, #612]	; (80039fc <UART_SetConfig+0x2c4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	4313      	orrs	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a90      	ldr	r2, [pc, #576]	; (8003a00 <UART_SetConfig+0x2c8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d126      	bne.n	8003810 <UART_SetConfig+0xd8>
 80037c2:	4b90      	ldr	r3, [pc, #576]	; (8003a04 <UART_SetConfig+0x2cc>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d81b      	bhi.n	8003808 <UART_SetConfig+0xd0>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <UART_SetConfig+0xa0>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f9 	.word	0x080037f9
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003801 	.word	0x08003801
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e116      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e112      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80037f8:	2304      	movs	r3, #4
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e10e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003800:	2308      	movs	r3, #8
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e10a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003808:	2310      	movs	r3, #16
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e106      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a7c      	ldr	r2, [pc, #496]	; (8003a08 <UART_SetConfig+0x2d0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d138      	bne.n	800388c <UART_SetConfig+0x154>
 800381a:	4b7a      	ldr	r3, [pc, #488]	; (8003a04 <UART_SetConfig+0x2cc>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d82d      	bhi.n	8003884 <UART_SetConfig+0x14c>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0xf8>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003865 	.word	0x08003865
 8003834:	08003885 	.word	0x08003885
 8003838:	08003885 	.word	0x08003885
 800383c:	08003885 	.word	0x08003885
 8003840:	08003875 	.word	0x08003875
 8003844:	08003885 	.word	0x08003885
 8003848:	08003885 	.word	0x08003885
 800384c:	08003885 	.word	0x08003885
 8003850:	0800386d 	.word	0x0800386d
 8003854:	08003885 	.word	0x08003885
 8003858:	08003885 	.word	0x08003885
 800385c:	08003885 	.word	0x08003885
 8003860:	0800387d 	.word	0x0800387d
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e0d8      	b.n	8003a1e <UART_SetConfig+0x2e6>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e0d4      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e0d0      	b.n	8003a1e <UART_SetConfig+0x2e6>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e0cc      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e0c8      	b.n	8003a1e <UART_SetConfig+0x2e6>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <UART_SetConfig+0x2d4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d125      	bne.n	80038e2 <UART_SetConfig+0x1aa>
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d016      	beq.n	80038d2 <UART_SetConfig+0x19a>
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d818      	bhi.n	80038da <UART_SetConfig+0x1a2>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d00a      	beq.n	80038c2 <UART_SetConfig+0x18a>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d814      	bhi.n	80038da <UART_SetConfig+0x1a2>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <UART_SetConfig+0x182>
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d008      	beq.n	80038ca <UART_SetConfig+0x192>
 80038b8:	e00f      	b.n	80038da <UART_SetConfig+0x1a2>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c0:	e0ad      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038c2:	2302      	movs	r3, #2
 80038c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c8:	e0a9      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038ca:	2304      	movs	r3, #4
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d0:	e0a5      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038d2:	2308      	movs	r3, #8
 80038d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d8:	e0a1      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038da:	2310      	movs	r3, #16
 80038dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e0:	e09d      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <UART_SetConfig+0x2d8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d125      	bne.n	8003938 <UART_SetConfig+0x200>
 80038ec:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <UART_SetConfig+0x2cc>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038f6:	2bc0      	cmp	r3, #192	; 0xc0
 80038f8:	d016      	beq.n	8003928 <UART_SetConfig+0x1f0>
 80038fa:	2bc0      	cmp	r3, #192	; 0xc0
 80038fc:	d818      	bhi.n	8003930 <UART_SetConfig+0x1f8>
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d00a      	beq.n	8003918 <UART_SetConfig+0x1e0>
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d814      	bhi.n	8003930 <UART_SetConfig+0x1f8>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <UART_SetConfig+0x1d8>
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d008      	beq.n	8003920 <UART_SetConfig+0x1e8>
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x1f8>
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e082      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003918:	2302      	movs	r3, #2
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e07e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003920:	2304      	movs	r3, #4
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e07a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003928:	2308      	movs	r3, #8
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e076      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003930:	2310      	movs	r3, #16
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e072      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <UART_SetConfig+0x2dc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12a      	bne.n	8003998 <UART_SetConfig+0x260>
 8003942:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003950:	d01a      	beq.n	8003988 <UART_SetConfig+0x250>
 8003952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0x258>
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d00c      	beq.n	8003978 <UART_SetConfig+0x240>
 800395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003962:	d815      	bhi.n	8003990 <UART_SetConfig+0x258>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <UART_SetConfig+0x238>
 8003968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396c:	d008      	beq.n	8003980 <UART_SetConfig+0x248>
 800396e:	e00f      	b.n	8003990 <UART_SetConfig+0x258>
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e052      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e04e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e04a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e046      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e042      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <UART_SetConfig+0x2c4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d13a      	bne.n	8003a18 <UART_SetConfig+0x2e0>
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <UART_SetConfig+0x2cc>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039b0:	d01a      	beq.n	80039e8 <UART_SetConfig+0x2b0>
 80039b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039b6:	d81b      	bhi.n	80039f0 <UART_SetConfig+0x2b8>
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039bc:	d00c      	beq.n	80039d8 <UART_SetConfig+0x2a0>
 80039be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c2:	d815      	bhi.n	80039f0 <UART_SetConfig+0x2b8>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <UART_SetConfig+0x298>
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	d008      	beq.n	80039e0 <UART_SetConfig+0x2a8>
 80039ce:	e00f      	b.n	80039f0 <UART_SetConfig+0x2b8>
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e022      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039d8:	2302      	movs	r3, #2
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e01e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039e0:	2304      	movs	r3, #4
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e01a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039e8:	2308      	movs	r3, #8
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e016      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039f0:	2310      	movs	r3, #16
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e012      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039f8:	efff69f3 	.word	0xefff69f3
 80039fc:	40008000 	.word	0x40008000
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	40005000 	.word	0x40005000
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a9f      	ldr	r2, [pc, #636]	; (8003ca0 <UART_SetConfig+0x568>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d17a      	bne.n	8003b1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d824      	bhi.n	8003a7a <UART_SetConfig+0x342>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <UART_SetConfig+0x300>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a7b 	.word	0x08003a7b
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a7b 	.word	0x08003a7b
 8003a48:	08003a6b 	.word	0x08003a6b
 8003a4c:	08003a7b 	.word	0x08003a7b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a7b 	.word	0x08003a7b
 8003a58:	08003a73 	.word	0x08003a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe ff64 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8003a60:	61f8      	str	r0, [r7, #28]
        break;
 8003a62:	e010      	b.n	8003a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a64:	4b8f      	ldr	r3, [pc, #572]	; (8003ca4 <UART_SetConfig+0x56c>)
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e00d      	b.n	8003a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7fe fec5 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8003a6e:	61f8      	str	r0, [r7, #28]
        break;
 8003a70:	e009      	b.n	8003a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	61fb      	str	r3, [r7, #28]
        break;
 8003a78:	e005      	b.n	8003a86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80fb 	beq.w	8003c84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d305      	bcc.n	8003aaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d903      	bls.n	8003ab2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ab0:	e0e8      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	4615      	mov	r5, r2
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	022b      	lsls	r3, r5, #8
 8003ac4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ac8:	0222      	lsls	r2, r4, #8
 8003aca:	68f9      	ldr	r1, [r7, #12]
 8003acc:	6849      	ldr	r1, [r1, #4]
 8003ace:	0849      	lsrs	r1, r1, #1
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	4688      	mov	r8, r1
 8003ad4:	4681      	mov	r9, r0
 8003ad6:	eb12 0a08 	adds.w	sl, r2, r8
 8003ada:	eb43 0b09 	adc.w	fp, r3, r9
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aec:	4650      	mov	r0, sl
 8003aee:	4659      	mov	r1, fp
 8003af0:	f7fc fbbe 	bl	8000270 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b02:	d308      	bcc.n	8003b16 <UART_SetConfig+0x3de>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0a:	d204      	bcs.n	8003b16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	e0b6      	b.n	8003c84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b1c:	e0b2      	b.n	8003c84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b26:	d15e      	bne.n	8003be6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d828      	bhi.n	8003b82 <UART_SetConfig+0x44a>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0x400>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b5d 	.word	0x08003b5d
 8003b3c:	08003b65 	.word	0x08003b65
 8003b40:	08003b6d 	.word	0x08003b6d
 8003b44:	08003b83 	.word	0x08003b83
 8003b48:	08003b73 	.word	0x08003b73
 8003b4c:	08003b83 	.word	0x08003b83
 8003b50:	08003b83 	.word	0x08003b83
 8003b54:	08003b83 	.word	0x08003b83
 8003b58:	08003b7b 	.word	0x08003b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7fe fee4 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8003b60:	61f8      	str	r0, [r7, #28]
        break;
 8003b62:	e014      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b64:	f7fe fef6 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8003b68:	61f8      	str	r0, [r7, #28]
        break;
 8003b6a:	e010      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ca4 <UART_SetConfig+0x56c>)
 8003b6e:	61fb      	str	r3, [r7, #28]
        break;
 8003b70:	e00d      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b72:	f7fe fe41 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8003b76:	61f8      	str	r0, [r7, #28]
        break;
 8003b78:	e009      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	61fb      	str	r3, [r7, #28]
        break;
 8003b80:	e005      	b.n	8003b8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d077      	beq.n	8003c84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005a      	lsls	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d916      	bls.n	8003bde <UART_SetConfig+0x4a6>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d212      	bcs.n	8003bde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f023 030f 	bic.w	r3, r3, #15
 8003bc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	8afb      	ldrh	r3, [r7, #22]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	8afa      	ldrh	r2, [r7, #22]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e052      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003be4:	e04e      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d827      	bhi.n	8003c3e <UART_SetConfig+0x506>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0x4bc>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c3f 	.word	0x08003c3f
 8003c04:	08003c2f 	.word	0x08003c2f
 8003c08:	08003c3f 	.word	0x08003c3f
 8003c0c:	08003c3f 	.word	0x08003c3f
 8003c10:	08003c3f 	.word	0x08003c3f
 8003c14:	08003c37 	.word	0x08003c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe fe86 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	61f8      	str	r0, [r7, #28]
        break;
 8003c1e:	e014      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c20:	f7fe fe98 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8003c24:	61f8      	str	r0, [r7, #28]
        break;
 8003c26:	e010      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <UART_SetConfig+0x56c>)
 8003c2a:	61fb      	str	r3, [r7, #28]
        break;
 8003c2c:	e00d      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2e:	f7fe fde3 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8003c32:	61f8      	str	r0, [r7, #28]
        break;
 8003c34:	e009      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3a:	61fb      	str	r3, [r7, #28]
        break;
 8003c3c:	e005      	b.n	8003c4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c48:	bf00      	nop
    }

    if (pclk != 0U)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d019      	beq.n	8003c84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085a      	lsrs	r2, r3, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	441a      	add	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d909      	bls.n	8003c7e <UART_SetConfig+0x546>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d205      	bcs.n	8003c7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e002      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40008000 	.word	0x40008000
 8003ca4:	00f42400 	.word	0x00f42400

08003ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da6:	d10a      	bne.n	8003dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b098      	sub	sp, #96	; 0x60
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dfc:	f7fc ffa8 	bl	8000d50 <HAL_GetTick>
 8003e00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d12e      	bne.n	8003e6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f88c 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d021      	beq.n	8003e6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e6      	bne.n	8003e2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e062      	b.n	8003f34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d149      	bne.n	8003f10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e84:	2200      	movs	r2, #0
 8003e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f856 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03c      	beq.n	8003f10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e6      	bne.n	8003e96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee8:	61fa      	str	r2, [r7, #28]
 8003eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e011      	b.n	8003f34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3758      	adds	r7, #88	; 0x58
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	e049      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d045      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fc fefb 	bl	8000d50 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e048      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d031      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d110      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2208      	movs	r2, #8
 8003f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f925 	bl	80041e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e029      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbc:	d111      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f90b 	bl	80041e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e00f      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d0a6      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800400c:	b480      	push	{r7}
 800400e:	b097      	sub	sp, #92	; 0x5c
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403e:	d10e      	bne.n	800405e <UART_Start_Receive_IT+0x52>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <UART_Start_Receive_IT+0x48>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800404e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004052:	e02d      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	22ff      	movs	r2, #255	; 0xff
 8004058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800405c:	e028      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10d      	bne.n	8004082 <UART_Start_Receive_IT+0x76>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <UART_Start_Receive_IT+0x6c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004076:	e01b      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	227f      	movs	r2, #127	; 0x7f
 800407c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004080:	e016      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408a:	d10d      	bne.n	80040a8 <UART_Start_Receive_IT+0x9c>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <UART_Start_Receive_IT+0x92>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	227f      	movs	r2, #127	; 0x7f
 8004098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409c:	e008      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	223f      	movs	r2, #63	; 0x3f
 80040a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a6:	e003      	b.n	80040b0 <UART_Start_Receive_IT+0xa4>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2222      	movs	r2, #34	; 0x22
 80040bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	657b      	str	r3, [r7, #84]	; 0x54
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80040e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d107      	bne.n	800410e <UART_Start_Receive_IT+0x102>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a21      	ldr	r2, [pc, #132]	; (8004190 <UART_Start_Receive_IT+0x184>)
 800410a:	669a      	str	r2, [r3, #104]	; 0x68
 800410c:	e002      	b.n	8004114 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <UART_Start_Receive_IT+0x188>)
 8004112:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
 800413c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <UART_Start_Receive_IT+0x110>
 800414e:	e018      	b.n	8004182 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	613b      	str	r3, [r7, #16]
   return(result);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f043 0320 	orr.w	r3, r3, #32
 8004164:	653b      	str	r3, [r7, #80]	; 0x50
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416e:	623b      	str	r3, [r7, #32]
 8004170:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	69f9      	ldr	r1, [r7, #28]
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	61bb      	str	r3, [r7, #24]
   return(result);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	375c      	adds	r7, #92	; 0x5c
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	0800459d 	.word	0x0800459d
 8004194:	080043e1 	.word	0x080043e1

08004198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	613b      	str	r3, [r7, #16]
   return(result);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e6      	bne.n	80041a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80041d8:	bf00      	nop
 80041da:	3724      	adds	r7, #36	; 0x24
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b095      	sub	sp, #84	; 0x54
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
 800420c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e6      	bne.n	80041ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	61fb      	str	r3, [r7, #28]
   return(result);
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800423e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e5      	bne.n	800421e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	2b01      	cmp	r3, #1
 8004258:	d118      	bne.n	800428c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	60bb      	str	r3, [r7, #8]
   return(result);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	647b      	str	r3, [r7, #68]	; 0x44
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6979      	ldr	r1, [r7, #20]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	613b      	str	r3, [r7, #16]
   return(result);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e6      	bne.n	800425a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042a0:	bf00      	nop
 80042a2:	3754      	adds	r7, #84	; 0x54
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b090      	sub	sp, #64	; 0x40
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d137      	bne.n	8004338 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80042c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	623b      	str	r3, [r7, #32]
   return(result);
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f0:	633a      	str	r2, [r7, #48]	; 0x30
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	60fb      	str	r3, [r7, #12]
   return(result);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	617b      	str	r3, [r7, #20]
   return(result);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e6      	bne.n	8004304 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004336:	e002      	b.n	800433e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004338:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800433a:	f7fc f955 	bl	80005e8 <HAL_UART_TxCpltCallback>
}
 800433e:	bf00      	nop
 8004340:	3740      	adds	r7, #64	; 0x40
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff f9cf 	bl	80036f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d109      	bne.n	80043a0 <UART_DMAError+0x3e>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b21      	cmp	r3, #33	; 0x21
 8004390:	d106      	bne.n	80043a0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff fefc 	bl	8004198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d109      	bne.n	80043c2 <UART_DMAError+0x60>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b22      	cmp	r3, #34	; 0x22
 80043b2:	d106      	bne.n	80043c2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80043bc:	6978      	ldr	r0, [r7, #20]
 80043be:	f7ff ff11 	bl	80041e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c8:	f043 0210 	orr.w	r2, r3, #16
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f7ff f99a 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b09c      	sub	sp, #112	; 0x70
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f8:	2b22      	cmp	r3, #34	; 0x22
 80043fa:	f040 80be 	bne.w	800457a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004404:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004408:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800440c:	b2d9      	uxtb	r1, r3
 800440e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004412:	b2da      	uxtb	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	400a      	ands	r2, r1
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 80a3 	bne.w	800458e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445c:	66bb      	str	r3, [r7, #104]	; 0x68
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004466:	65bb      	str	r3, [r7, #88]	; 0x58
 8004468:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800446c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	667b      	str	r3, [r7, #100]	; 0x64
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800449a:	647a      	str	r2, [r7, #68]	; 0x44
 800449c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a34      	ldr	r2, [pc, #208]	; (8004598 <UART_RxISR_8BIT+0x1b8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01f      	beq.n	800450c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	623b      	str	r3, [r7, #32]
   return(result);
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ee:	663b      	str	r3, [r7, #96]	; 0x60
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
 80044fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	2b01      	cmp	r3, #1
 8004512:	d12e      	bne.n	8004572 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60fb      	str	r3, [r7, #12]
   return(result);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	617b      	str	r3, [r7, #20]
   return(result);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d103      	bne.n	8004562 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f8d8 	bl	8003720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004570:	e00d      	b.n	800458e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc f820 	bl	80005b8 <HAL_UART_RxCpltCallback>
}
 8004578:	e009      	b.n	800458e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	8b1b      	ldrh	r3, [r3, #24]
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	b292      	uxth	r2, r2
 800458c:	831a      	strh	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	3770      	adds	r7, #112	; 0x70
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40008000 	.word	0x40008000

0800459c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b09c      	sub	sp, #112	; 0x70
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b4:	2b22      	cmp	r3, #34	; 0x22
 80045b6:	f040 80be 	bne.w	8004736 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80045ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80045ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80045d2:	4013      	ands	r3, r2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80a3 	bne.w	800474a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004618:	667b      	str	r3, [r7, #100]	; 0x64
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004622:	657b      	str	r3, [r7, #84]	; 0x54
 8004624:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e6      	bne.n	8004604 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3308      	adds	r3, #8
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	663b      	str	r3, [r7, #96]	; 0x60
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004656:	643a      	str	r2, [r7, #64]	; 0x40
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e5      	bne.n	8004636 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a34      	ldr	r2, [pc, #208]	; (8004754 <UART_RxISR_16BIT+0x1b8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d01f      	beq.n	80046c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d12e      	bne.n	800472e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6979      	ldr	r1, [r7, #20]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	613b      	str	r3, [r7, #16]
   return(result);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e6      	bne.n	80046d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b10      	cmp	r3, #16
 8004714:	d103      	bne.n	800471e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2210      	movs	r2, #16
 800471c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fe fffa 	bl	8003720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800472c:	e00d      	b.n	800474a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fb ff42 	bl	80005b8 <HAL_UART_RxCpltCallback>
}
 8004734:	e009      	b.n	800474a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	8b1b      	ldrh	r3, [r3, #24]
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	b292      	uxth	r2, r2
 8004748:	831a      	strh	r2, [r3, #24]
}
 800474a:	bf00      	nop
 800474c:	3770      	adds	r7, #112	; 0x70
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40008000 	.word	0x40008000

08004758 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	729a      	strb	r2, [r3, #10]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af04      	add	r7, sp, #16
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	2301      	movs	r3, #1
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2301      	movs	r3, #1
 80047ba:	2200      	movs	r2, #0
 80047bc:	2178      	movs	r1, #120	; 0x78
 80047be:	4803      	ldr	r0, [pc, #12]	; (80047cc <ssd1306_WriteCommand+0x2c>)
 80047c0:	f7fc feca 	bl	8001558 <HAL_I2C_Mem_Write>
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	2000008c 	.word	0x2000008c

080047d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	9202      	str	r2, [sp, #8]
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2301      	movs	r3, #1
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	2178      	movs	r1, #120	; 0x78
 80047f0:	4803      	ldr	r0, [pc, #12]	; (8004800 <ssd1306_WriteData+0x30>)
 80047f2:	f7fc feb1 	bl	8001558 <HAL_I2C_Mem_Write>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000008c 	.word	0x2000008c

08004804 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004808:	f7ff ffc2 	bl	8004790 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800480c:	2064      	movs	r0, #100	; 0x64
 800480e:	f7fc faab 	bl	8000d68 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004812:	2000      	movs	r0, #0
 8004814:	f000 f9da 	bl	8004bcc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004818:	2020      	movs	r0, #32
 800481a:	f7ff ffc1 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800481e:	2000      	movs	r0, #0
 8004820:	f7ff ffbe 	bl	80047a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004824:	20b0      	movs	r0, #176	; 0xb0
 8004826:	f7ff ffbb 	bl	80047a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800482a:	20c8      	movs	r0, #200	; 0xc8
 800482c:	f7ff ffb8 	bl	80047a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004830:	2000      	movs	r0, #0
 8004832:	f7ff ffb5 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004836:	2010      	movs	r0, #16
 8004838:	f7ff ffb2 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800483c:	2040      	movs	r0, #64	; 0x40
 800483e:	f7ff ffaf 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004842:	20ff      	movs	r0, #255	; 0xff
 8004844:	f000 f9ae 	bl	8004ba4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004848:	20a1      	movs	r0, #161	; 0xa1
 800484a:	f7ff ffa9 	bl	80047a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800484e:	20a6      	movs	r0, #166	; 0xa6
 8004850:	f7ff ffa6 	bl	80047a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004854:	20a8      	movs	r0, #168	; 0xa8
 8004856:	f7ff ffa3 	bl	80047a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800485a:	203f      	movs	r0, #63	; 0x3f
 800485c:	f7ff ffa0 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004860:	20a4      	movs	r0, #164	; 0xa4
 8004862:	f7ff ff9d 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004866:	20d3      	movs	r0, #211	; 0xd3
 8004868:	f7ff ff9a 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800486c:	2000      	movs	r0, #0
 800486e:	f7ff ff97 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004872:	20d5      	movs	r0, #213	; 0xd5
 8004874:	f7ff ff94 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004878:	20f0      	movs	r0, #240	; 0xf0
 800487a:	f7ff ff91 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800487e:	20d9      	movs	r0, #217	; 0xd9
 8004880:	f7ff ff8e 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004884:	2022      	movs	r0, #34	; 0x22
 8004886:	f7ff ff8b 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800488a:	20da      	movs	r0, #218	; 0xda
 800488c:	f7ff ff88 	bl	80047a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004890:	2012      	movs	r0, #18
 8004892:	f7ff ff85 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004896:	20db      	movs	r0, #219	; 0xdb
 8004898:	f7ff ff82 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800489c:	2020      	movs	r0, #32
 800489e:	f7ff ff7f 	bl	80047a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80048a2:	208d      	movs	r0, #141	; 0x8d
 80048a4:	f7ff ff7c 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80048a8:	2014      	movs	r0, #20
 80048aa:	f7ff ff79 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80048ae:	2001      	movs	r0, #1
 80048b0:	f000 f98c 	bl	8004bcc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80048b4:	2000      	movs	r0, #0
 80048b6:	f000 f80f 	bl	80048d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80048ba:	f000 f831 	bl	8004920 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <ssd1306_Init+0xd0>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <ssd1306_Init+0xd0>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80048ca:	4b02      	ldr	r3, [pc, #8]	; (80048d4 <ssd1306_Init+0xd0>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	711a      	strb	r2, [r3, #4]
}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000590 	.word	0x20000590

080048d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e00d      	b.n	8004904 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <ssd1306_Fill+0x1a>
 80048ee:	2100      	movs	r1, #0
 80048f0:	e000      	b.n	80048f4 <ssd1306_Fill+0x1c>
 80048f2:	21ff      	movs	r1, #255	; 0xff
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <ssd1306_Fill+0x44>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	460a      	mov	r2, r1
 80048fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d3ed      	bcc.n	80048e8 <ssd1306_Fill+0x10>
    }
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000190 	.word	0x20000190

08004920 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004926:	2300      	movs	r3, #0
 8004928:	71fb      	strb	r3, [r7, #7]
 800492a:	e016      	b.n	800495a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	3b50      	subs	r3, #80	; 0x50
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ff34 	bl	80047a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004938:	2000      	movs	r0, #0
 800493a:	f7ff ff31 	bl	80047a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800493e:	2010      	movs	r0, #16
 8004940:	f7ff ff2e 	bl	80047a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <ssd1306_UpdateScreen+0x4c>)
 800494a:	4413      	add	r3, r2
 800494c:	2180      	movs	r1, #128	; 0x80
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ff3e 	bl	80047d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	3301      	adds	r3, #1
 8004958:	71fb      	strb	r3, [r7, #7]
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b07      	cmp	r3, #7
 800495e:	d9e5      	bls.n	800492c <ssd1306_UpdateScreen+0xc>
    }
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000190 	.word	0x20000190

08004970 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
 800497a:	460b      	mov	r3, r1
 800497c:	71bb      	strb	r3, [r7, #6]
 800497e:	4613      	mov	r3, r2
 8004980:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db3d      	blt.n	8004a06 <ssd1306_DrawPixel+0x96>
 800498a:	79bb      	ldrb	r3, [r7, #6]
 800498c:	2b3f      	cmp	r3, #63	; 0x3f
 800498e:	d83a      	bhi.n	8004a06 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004990:	797b      	ldrb	r3, [r7, #5]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d11a      	bne.n	80049cc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004996:	79fa      	ldrb	r2, [r7, #7]
 8004998:	79bb      	ldrb	r3, [r7, #6]
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	b2d8      	uxtb	r0, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	01db      	lsls	r3, r3, #7
 80049a2:	4413      	add	r3, r2
 80049a4:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <ssd1306_DrawPixel+0xa4>)
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	b25a      	sxtb	r2, r3
 80049aa:	79bb      	ldrb	r3, [r7, #6]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	2101      	movs	r1, #1
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b259      	sxtb	r1, r3
 80049bc:	79fa      	ldrb	r2, [r7, #7]
 80049be:	4603      	mov	r3, r0
 80049c0:	01db      	lsls	r3, r3, #7
 80049c2:	4413      	add	r3, r2
 80049c4:	b2c9      	uxtb	r1, r1
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <ssd1306_DrawPixel+0xa4>)
 80049c8:	54d1      	strb	r1, [r2, r3]
 80049ca:	e01d      	b.n	8004a08 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	79bb      	ldrb	r3, [r7, #6]
 80049d0:	08db      	lsrs	r3, r3, #3
 80049d2:	b2d8      	uxtb	r0, r3
 80049d4:	4603      	mov	r3, r0
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	4413      	add	r3, r2
 80049da:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <ssd1306_DrawPixel+0xa4>)
 80049dc:	5cd3      	ldrb	r3, [r2, r3]
 80049de:	b25a      	sxtb	r2, r3
 80049e0:	79bb      	ldrb	r3, [r7, #6]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	4013      	ands	r3, r2
 80049f4:	b259      	sxtb	r1, r3
 80049f6:	79fa      	ldrb	r2, [r7, #7]
 80049f8:	4603      	mov	r3, r0
 80049fa:	01db      	lsls	r3, r3, #7
 80049fc:	4413      	add	r3, r2
 80049fe:	b2c9      	uxtb	r1, r1
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <ssd1306_DrawPixel+0xa4>)
 8004a02:	54d1      	strb	r1, [r2, r3]
 8004a04:	e000      	b.n	8004a08 <ssd1306_DrawPixel+0x98>
        return;
 8004a06:	bf00      	nop
    }
}
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000190 	.word	0x20000190

08004a18 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	1d38      	adds	r0, r7, #4
 8004a22:	e880 0006 	stmia.w	r0, {r1, r2}
 8004a26:	461a      	mov	r2, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b1f      	cmp	r3, #31
 8004a34:	d902      	bls.n	8004a3c <ssd1306_WriteChar+0x24>
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b7e      	cmp	r3, #126	; 0x7e
 8004a3a:	d901      	bls.n	8004a40 <ssd1306_WriteChar+0x28>
        return 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e06d      	b.n	8004b1c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004a40:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	793b      	ldrb	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	dc06      	bgt.n	8004a5c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004a50:	885b      	ldrh	r3, [r3, #2]
 8004a52:	461a      	mov	r2, r3
 8004a54:	797b      	ldrb	r3, [r7, #5]
 8004a56:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	dd01      	ble.n	8004a60 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e05d      	b.n	8004b1c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e04c      	b.n	8004b00 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	3b20      	subs	r3, #32
 8004a6c:	7979      	ldrb	r1, [r7, #5]
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4619      	mov	r1, r3
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	440b      	add	r3, r1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e034      	b.n	8004af0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d012      	beq.n	8004abc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004a96:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	b2d8      	uxtb	r0, r3
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004aa6:	885b      	ldrh	r3, [r3, #2]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	7bba      	ldrb	r2, [r7, #14]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f7ff ff5b 	bl	8004970 <ssd1306_DrawPixel>
 8004aba:	e016      	b.n	8004aea <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004abc:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b2d8      	uxtb	r0, r3
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004acc:	885b      	ldrh	r3, [r3, #2]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	b2d9      	uxtb	r1, r3
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f7ff ff43 	bl	8004970 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	793b      	ldrb	r3, [r7, #4]
 8004af2:	461a      	mov	r2, r3
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d3c5      	bcc.n	8004a86 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	797b      	ldrb	r3, [r7, #5]
 8004b02:	461a      	mov	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d3ad      	bcc.n	8004a66 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	793b      	ldrb	r3, [r7, #4]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <ssd1306_WriteChar+0x10c>)
 8004b18:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3724      	adds	r7, #36	; 0x24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}
 8004b24:	20000590 	.word	0x20000590

08004b28 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	1d38      	adds	r0, r7, #4
 8004b32:	e880 0006 	stmia.w	r0, {r1, r2}
 8004b36:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004b38:	e012      	b.n	8004b60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	7818      	ldrb	r0, [r3, #0]
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	1d3a      	adds	r2, r7, #4
 8004b42:	ca06      	ldmia	r2, {r1, r2}
 8004b44:	f7ff ff68 	bl	8004a18 <ssd1306_WriteChar>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d002      	beq.n	8004b5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	e008      	b.n	8004b6c <ssd1306_WriteString+0x44>
        }
        str++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e8      	bne.n	8004b3a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	71fb      	strb	r3, [r7, #7]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <ssd1306_SetCursor+0x2c>)
 8004b8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004b8c:	79bb      	ldrb	r3, [r7, #6]
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <ssd1306_SetCursor+0x2c>)
 8004b92:	805a      	strh	r2, [r3, #2]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000590 	.word	0x20000590

08004ba4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004bae:	2381      	movs	r3, #129	; 0x81
 8004bb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fdf3 	bl	80047a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fdef 	bl	80047a0 <ssd1306_WriteCommand>
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004bdc:	23af      	movs	r3, #175	; 0xaf
 8004bde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <ssd1306_SetDisplayOn+0x38>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	715a      	strb	r2, [r3, #5]
 8004be6:	e004      	b.n	8004bf2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004be8:	23ae      	movs	r3, #174	; 0xae
 8004bea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <ssd1306_SetDisplayOn+0x38>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fdd3 	bl	80047a0 <ssd1306_WriteCommand>
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000590 	.word	0x20000590

08004c08 <std>:
 8004c08:	2300      	movs	r3, #0
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c16:	6083      	str	r3, [r0, #8]
 8004c18:	8181      	strh	r1, [r0, #12]
 8004c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c1c:	81c2      	strh	r2, [r0, #14]
 8004c1e:	6183      	str	r3, [r0, #24]
 8004c20:	4619      	mov	r1, r3
 8004c22:	2208      	movs	r2, #8
 8004c24:	305c      	adds	r0, #92	; 0x5c
 8004c26:	f000 f8f4 	bl	8004e12 <memset>
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <std+0x38>)
 8004c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <std+0x3c>)
 8004c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <std+0x40>)
 8004c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <std+0x44>)
 8004c38:	6224      	str	r4, [r4, #32]
 8004c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004d8d 	.word	0x08004d8d
 8004c44:	08004daf 	.word	0x08004daf
 8004c48:	08004de7 	.word	0x08004de7
 8004c4c:	08004e0b 	.word	0x08004e0b

08004c50 <stdio_exit_handler>:
 8004c50:	4a02      	ldr	r2, [pc, #8]	; (8004c5c <stdio_exit_handler+0xc>)
 8004c52:	4903      	ldr	r1, [pc, #12]	; (8004c60 <stdio_exit_handler+0x10>)
 8004c54:	4803      	ldr	r0, [pc, #12]	; (8004c64 <stdio_exit_handler+0x14>)
 8004c56:	f000 b869 	b.w	8004d2c <_fwalk_sglue>
 8004c5a:	bf00      	nop
 8004c5c:	20000014 	.word	0x20000014
 8004c60:	080057ad 	.word	0x080057ad
 8004c64:	20000020 	.word	0x20000020

08004c68 <cleanup_stdio>:
 8004c68:	6841      	ldr	r1, [r0, #4]
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <cleanup_stdio+0x34>)
 8004c6c:	4299      	cmp	r1, r3
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	d001      	beq.n	8004c78 <cleanup_stdio+0x10>
 8004c74:	f000 fd9a 	bl	80057ac <_fflush_r>
 8004c78:	68a1      	ldr	r1, [r4, #8]
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <cleanup_stdio+0x38>)
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	d002      	beq.n	8004c86 <cleanup_stdio+0x1e>
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 fd93 	bl	80057ac <_fflush_r>
 8004c86:	68e1      	ldr	r1, [r4, #12]
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <cleanup_stdio+0x3c>)
 8004c8a:	4299      	cmp	r1, r3
 8004c8c:	d004      	beq.n	8004c98 <cleanup_stdio+0x30>
 8004c8e:	4620      	mov	r0, r4
 8004c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c94:	f000 bd8a 	b.w	80057ac <_fflush_r>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000598 	.word	0x20000598
 8004ca0:	20000600 	.word	0x20000600
 8004ca4:	20000668 	.word	0x20000668

08004ca8 <global_stdio_init.part.0>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <global_stdio_init.part.0+0x30>)
 8004cac:	4c0b      	ldr	r4, [pc, #44]	; (8004cdc <global_stdio_init.part.0+0x34>)
 8004cae:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <global_stdio_init.part.0+0x38>)
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	f7ff ffa6 	bl	8004c08 <std>
 8004cbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	2109      	movs	r1, #9
 8004cc4:	f7ff ffa0 	bl	8004c08 <std>
 8004cc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ccc:	2202      	movs	r2, #2
 8004cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd2:	2112      	movs	r1, #18
 8004cd4:	f7ff bf98 	b.w	8004c08 <std>
 8004cd8:	200006d0 	.word	0x200006d0
 8004cdc:	20000598 	.word	0x20000598
 8004ce0:	08004c51 	.word	0x08004c51

08004ce4 <__sfp_lock_acquire>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__sfp_lock_acquire+0x8>)
 8004ce6:	f000 b90d 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 8004cea:	bf00      	nop
 8004cec:	200006d9 	.word	0x200006d9

08004cf0 <__sfp_lock_release>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	; (8004cf8 <__sfp_lock_release+0x8>)
 8004cf2:	f000 b908 	b.w	8004f06 <__retarget_lock_release_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	200006d9 	.word	0x200006d9

08004cfc <__sinit>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	4604      	mov	r4, r0
 8004d00:	f7ff fff0 	bl	8004ce4 <__sfp_lock_acquire>
 8004d04:	6a23      	ldr	r3, [r4, #32]
 8004d06:	b11b      	cbz	r3, 8004d10 <__sinit+0x14>
 8004d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0c:	f7ff bff0 	b.w	8004cf0 <__sfp_lock_release>
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <__sinit+0x28>)
 8004d12:	6223      	str	r3, [r4, #32]
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <__sinit+0x2c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f5      	bne.n	8004d08 <__sinit+0xc>
 8004d1c:	f7ff ffc4 	bl	8004ca8 <global_stdio_init.part.0>
 8004d20:	e7f2      	b.n	8004d08 <__sinit+0xc>
 8004d22:	bf00      	nop
 8004d24:	08004c69 	.word	0x08004c69
 8004d28:	200006d0 	.word	0x200006d0

08004d2c <_fwalk_sglue>:
 8004d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d30:	4607      	mov	r7, r0
 8004d32:	4688      	mov	r8, r1
 8004d34:	4614      	mov	r4, r2
 8004d36:	2600      	movs	r6, #0
 8004d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d40:	d505      	bpl.n	8004d4e <_fwalk_sglue+0x22>
 8004d42:	6824      	ldr	r4, [r4, #0]
 8004d44:	2c00      	cmp	r4, #0
 8004d46:	d1f7      	bne.n	8004d38 <_fwalk_sglue+0xc>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d4e:	89ab      	ldrh	r3, [r5, #12]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d907      	bls.n	8004d64 <_fwalk_sglue+0x38>
 8004d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	d003      	beq.n	8004d64 <_fwalk_sglue+0x38>
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4638      	mov	r0, r7
 8004d60:	47c0      	blx	r8
 8004d62:	4306      	orrs	r6, r0
 8004d64:	3568      	adds	r5, #104	; 0x68
 8004d66:	e7e9      	b.n	8004d3c <_fwalk_sglue+0x10>

08004d68 <iprintf>:
 8004d68:	b40f      	push	{r0, r1, r2, r3}
 8004d6a:	b507      	push	{r0, r1, r2, lr}
 8004d6c:	4906      	ldr	r1, [pc, #24]	; (8004d88 <iprintf+0x20>)
 8004d6e:	ab04      	add	r3, sp, #16
 8004d70:	6808      	ldr	r0, [r1, #0]
 8004d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d76:	6881      	ldr	r1, [r0, #8]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	f000 f9e7 	bl	800514c <_vfiprintf_r>
 8004d7e:	b003      	add	sp, #12
 8004d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d84:	b004      	add	sp, #16
 8004d86:	4770      	bx	lr
 8004d88:	2000006c 	.word	0x2000006c

08004d8c <__sread>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	460c      	mov	r4, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	f000 f868 	bl	8004e68 <_read_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	bfab      	itete	ge
 8004d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004da0:	181b      	addge	r3, r3, r0
 8004da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004da6:	bfac      	ite	ge
 8004da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004daa:	81a3      	strhlt	r3, [r4, #12]
 8004dac:	bd10      	pop	{r4, pc}

08004dae <__swrite>:
 8004dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	461f      	mov	r7, r3
 8004db4:	898b      	ldrh	r3, [r1, #12]
 8004db6:	05db      	lsls	r3, r3, #23
 8004db8:	4605      	mov	r5, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	d505      	bpl.n	8004dcc <__swrite+0x1e>
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f000 f83c 	bl	8004e44 <_lseek_r>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	463b      	mov	r3, r7
 8004ddc:	4628      	mov	r0, r5
 8004dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	f000 b853 	b.w	8004e8c <_write_r>

08004de6 <__sseek>:
 8004de6:	b510      	push	{r4, lr}
 8004de8:	460c      	mov	r4, r1
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 f829 	bl	8004e44 <_lseek_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	bf15      	itete	ne
 8004df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e02:	81a3      	strheq	r3, [r4, #12]
 8004e04:	bf18      	it	ne
 8004e06:	81a3      	strhne	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__sclose>:
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 b809 	b.w	8004e24 <_close_r>

08004e12 <memset>:
 8004e12:	4402      	add	r2, r0
 8004e14:	4603      	mov	r3, r0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d100      	bne.n	8004e1c <memset+0xa>
 8004e1a:	4770      	bx	lr
 8004e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e20:	e7f9      	b.n	8004e16 <memset+0x4>
	...

08004e24 <_close_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d06      	ldr	r5, [pc, #24]	; (8004e40 <_close_r+0x1c>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	f7fb fe77 	bl	8000b22 <_close>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_close_r+0x1a>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_close_r+0x1a>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	200006d4 	.word	0x200006d4

08004e44 <_lseek_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	; (8004e64 <_lseek_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fb fe8c 	bl	8000b70 <_lseek>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_lseek_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_lseek_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200006d4 	.word	0x200006d4

08004e68 <_read_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d07      	ldr	r5, [pc, #28]	; (8004e88 <_read_r+0x20>)
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4608      	mov	r0, r1
 8004e70:	4611      	mov	r1, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	602a      	str	r2, [r5, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7fb fe36 	bl	8000ae8 <_read>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_read_r+0x1e>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_read_r+0x1e>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	200006d4 	.word	0x200006d4

08004e8c <_write_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4d07      	ldr	r5, [pc, #28]	; (8004eac <_write_r+0x20>)
 8004e90:	4604      	mov	r4, r0
 8004e92:	4608      	mov	r0, r1
 8004e94:	4611      	mov	r1, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	602a      	str	r2, [r5, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f7fb fb66 	bl	800056c <_write>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_write_r+0x1e>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_write_r+0x1e>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	200006d4 	.word	0x200006d4

08004eb0 <__errno>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <__errno+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	2000006c 	.word	0x2000006c

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4d0d      	ldr	r5, [pc, #52]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4d0b      	ldr	r5, [pc, #44]	; (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	; (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f000 fdbe 	bl	8005a50 <_init>
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2600      	movs	r6, #0
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08006e54 	.word	0x08006e54
 8004ef8:	08006e54 	.word	0x08006e54
 8004efc:	08006e54 	.word	0x08006e54
 8004f00:	08006e58 	.word	0x08006e58

08004f04 <__retarget_lock_acquire_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <__retarget_lock_release_recursive>:
 8004f06:	4770      	bx	lr

08004f08 <_free_r>:
 8004f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	d044      	beq.n	8004f98 <_free_r+0x90>
 8004f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f12:	9001      	str	r0, [sp, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f1a1 0404 	sub.w	r4, r1, #4
 8004f1a:	bfb8      	it	lt
 8004f1c:	18e4      	addlt	r4, r4, r3
 8004f1e:	f000 f8df 	bl	80050e0 <__malloc_lock>
 8004f22:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <_free_r+0x94>)
 8004f24:	9801      	ldr	r0, [sp, #4]
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	b933      	cbnz	r3, 8004f38 <_free_r+0x30>
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	6014      	str	r4, [r2, #0]
 8004f2e:	b003      	add	sp, #12
 8004f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f34:	f000 b8da 	b.w	80050ec <__malloc_unlock>
 8004f38:	42a3      	cmp	r3, r4
 8004f3a:	d908      	bls.n	8004f4e <_free_r+0x46>
 8004f3c:	6825      	ldr	r5, [r4, #0]
 8004f3e:	1961      	adds	r1, r4, r5
 8004f40:	428b      	cmp	r3, r1
 8004f42:	bf01      	itttt	eq
 8004f44:	6819      	ldreq	r1, [r3, #0]
 8004f46:	685b      	ldreq	r3, [r3, #4]
 8004f48:	1949      	addeq	r1, r1, r5
 8004f4a:	6021      	streq	r1, [r4, #0]
 8004f4c:	e7ed      	b.n	8004f2a <_free_r+0x22>
 8004f4e:	461a      	mov	r2, r3
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b10b      	cbz	r3, 8004f58 <_free_r+0x50>
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	d9fa      	bls.n	8004f4e <_free_r+0x46>
 8004f58:	6811      	ldr	r1, [r2, #0]
 8004f5a:	1855      	adds	r5, r2, r1
 8004f5c:	42a5      	cmp	r5, r4
 8004f5e:	d10b      	bne.n	8004f78 <_free_r+0x70>
 8004f60:	6824      	ldr	r4, [r4, #0]
 8004f62:	4421      	add	r1, r4
 8004f64:	1854      	adds	r4, r2, r1
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	d1e0      	bne.n	8004f2e <_free_r+0x26>
 8004f6c:	681c      	ldr	r4, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	6053      	str	r3, [r2, #4]
 8004f72:	440c      	add	r4, r1
 8004f74:	6014      	str	r4, [r2, #0]
 8004f76:	e7da      	b.n	8004f2e <_free_r+0x26>
 8004f78:	d902      	bls.n	8004f80 <_free_r+0x78>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	6003      	str	r3, [r0, #0]
 8004f7e:	e7d6      	b.n	8004f2e <_free_r+0x26>
 8004f80:	6825      	ldr	r5, [r4, #0]
 8004f82:	1961      	adds	r1, r4, r5
 8004f84:	428b      	cmp	r3, r1
 8004f86:	bf04      	itt	eq
 8004f88:	6819      	ldreq	r1, [r3, #0]
 8004f8a:	685b      	ldreq	r3, [r3, #4]
 8004f8c:	6063      	str	r3, [r4, #4]
 8004f8e:	bf04      	itt	eq
 8004f90:	1949      	addeq	r1, r1, r5
 8004f92:	6021      	streq	r1, [r4, #0]
 8004f94:	6054      	str	r4, [r2, #4]
 8004f96:	e7ca      	b.n	8004f2e <_free_r+0x26>
 8004f98:	b003      	add	sp, #12
 8004f9a:	bd30      	pop	{r4, r5, pc}
 8004f9c:	200006dc 	.word	0x200006dc

08004fa0 <sbrk_aligned>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	4e0e      	ldr	r6, [pc, #56]	; (8004fdc <sbrk_aligned+0x3c>)
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	6831      	ldr	r1, [r6, #0]
 8004fa8:	4605      	mov	r5, r0
 8004faa:	b911      	cbnz	r1, 8004fb2 <sbrk_aligned+0x12>
 8004fac:	f000 fcbc 	bl	8005928 <_sbrk_r>
 8004fb0:	6030      	str	r0, [r6, #0]
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f000 fcb7 	bl	8005928 <_sbrk_r>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	d00a      	beq.n	8004fd4 <sbrk_aligned+0x34>
 8004fbe:	1cc4      	adds	r4, r0, #3
 8004fc0:	f024 0403 	bic.w	r4, r4, #3
 8004fc4:	42a0      	cmp	r0, r4
 8004fc6:	d007      	beq.n	8004fd8 <sbrk_aligned+0x38>
 8004fc8:	1a21      	subs	r1, r4, r0
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 fcac 	bl	8005928 <_sbrk_r>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d101      	bne.n	8004fd8 <sbrk_aligned+0x38>
 8004fd4:	f04f 34ff 	mov.w	r4, #4294967295
 8004fd8:	4620      	mov	r0, r4
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	200006e0 	.word	0x200006e0

08004fe0 <_malloc_r>:
 8004fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe4:	1ccd      	adds	r5, r1, #3
 8004fe6:	f025 0503 	bic.w	r5, r5, #3
 8004fea:	3508      	adds	r5, #8
 8004fec:	2d0c      	cmp	r5, #12
 8004fee:	bf38      	it	cc
 8004ff0:	250c      	movcc	r5, #12
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	db01      	blt.n	8004ffc <_malloc_r+0x1c>
 8004ff8:	42a9      	cmp	r1, r5
 8004ffa:	d905      	bls.n	8005008 <_malloc_r+0x28>
 8004ffc:	230c      	movs	r3, #12
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	2600      	movs	r6, #0
 8005002:	4630      	mov	r0, r6
 8005004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005008:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050dc <_malloc_r+0xfc>
 800500c:	f000 f868 	bl	80050e0 <__malloc_lock>
 8005010:	f8d8 3000 	ldr.w	r3, [r8]
 8005014:	461c      	mov	r4, r3
 8005016:	bb5c      	cbnz	r4, 8005070 <_malloc_r+0x90>
 8005018:	4629      	mov	r1, r5
 800501a:	4638      	mov	r0, r7
 800501c:	f7ff ffc0 	bl	8004fa0 <sbrk_aligned>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	4604      	mov	r4, r0
 8005024:	d155      	bne.n	80050d2 <_malloc_r+0xf2>
 8005026:	f8d8 4000 	ldr.w	r4, [r8]
 800502a:	4626      	mov	r6, r4
 800502c:	2e00      	cmp	r6, #0
 800502e:	d145      	bne.n	80050bc <_malloc_r+0xdc>
 8005030:	2c00      	cmp	r4, #0
 8005032:	d048      	beq.n	80050c6 <_malloc_r+0xe6>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	4631      	mov	r1, r6
 8005038:	4638      	mov	r0, r7
 800503a:	eb04 0903 	add.w	r9, r4, r3
 800503e:	f000 fc73 	bl	8005928 <_sbrk_r>
 8005042:	4581      	cmp	r9, r0
 8005044:	d13f      	bne.n	80050c6 <_malloc_r+0xe6>
 8005046:	6821      	ldr	r1, [r4, #0]
 8005048:	1a6d      	subs	r5, r5, r1
 800504a:	4629      	mov	r1, r5
 800504c:	4638      	mov	r0, r7
 800504e:	f7ff ffa7 	bl	8004fa0 <sbrk_aligned>
 8005052:	3001      	adds	r0, #1
 8005054:	d037      	beq.n	80050c6 <_malloc_r+0xe6>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	442b      	add	r3, r5
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	f8d8 3000 	ldr.w	r3, [r8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d038      	beq.n	80050d6 <_malloc_r+0xf6>
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	42a2      	cmp	r2, r4
 8005068:	d12b      	bne.n	80050c2 <_malloc_r+0xe2>
 800506a:	2200      	movs	r2, #0
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	e00f      	b.n	8005090 <_malloc_r+0xb0>
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	1b52      	subs	r2, r2, r5
 8005074:	d41f      	bmi.n	80050b6 <_malloc_r+0xd6>
 8005076:	2a0b      	cmp	r2, #11
 8005078:	d917      	bls.n	80050aa <_malloc_r+0xca>
 800507a:	1961      	adds	r1, r4, r5
 800507c:	42a3      	cmp	r3, r4
 800507e:	6025      	str	r5, [r4, #0]
 8005080:	bf18      	it	ne
 8005082:	6059      	strne	r1, [r3, #4]
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	bf08      	it	eq
 8005088:	f8c8 1000 	streq.w	r1, [r8]
 800508c:	5162      	str	r2, [r4, r5]
 800508e:	604b      	str	r3, [r1, #4]
 8005090:	4638      	mov	r0, r7
 8005092:	f104 060b 	add.w	r6, r4, #11
 8005096:	f000 f829 	bl	80050ec <__malloc_unlock>
 800509a:	f026 0607 	bic.w	r6, r6, #7
 800509e:	1d23      	adds	r3, r4, #4
 80050a0:	1af2      	subs	r2, r6, r3
 80050a2:	d0ae      	beq.n	8005002 <_malloc_r+0x22>
 80050a4:	1b9b      	subs	r3, r3, r6
 80050a6:	50a3      	str	r3, [r4, r2]
 80050a8:	e7ab      	b.n	8005002 <_malloc_r+0x22>
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	6862      	ldr	r2, [r4, #4]
 80050ae:	d1dd      	bne.n	800506c <_malloc_r+0x8c>
 80050b0:	f8c8 2000 	str.w	r2, [r8]
 80050b4:	e7ec      	b.n	8005090 <_malloc_r+0xb0>
 80050b6:	4623      	mov	r3, r4
 80050b8:	6864      	ldr	r4, [r4, #4]
 80050ba:	e7ac      	b.n	8005016 <_malloc_r+0x36>
 80050bc:	4634      	mov	r4, r6
 80050be:	6876      	ldr	r6, [r6, #4]
 80050c0:	e7b4      	b.n	800502c <_malloc_r+0x4c>
 80050c2:	4613      	mov	r3, r2
 80050c4:	e7cc      	b.n	8005060 <_malloc_r+0x80>
 80050c6:	230c      	movs	r3, #12
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4638      	mov	r0, r7
 80050cc:	f000 f80e 	bl	80050ec <__malloc_unlock>
 80050d0:	e797      	b.n	8005002 <_malloc_r+0x22>
 80050d2:	6025      	str	r5, [r4, #0]
 80050d4:	e7dc      	b.n	8005090 <_malloc_r+0xb0>
 80050d6:	605b      	str	r3, [r3, #4]
 80050d8:	deff      	udf	#255	; 0xff
 80050da:	bf00      	nop
 80050dc:	200006dc 	.word	0x200006dc

080050e0 <__malloc_lock>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__malloc_lock+0x8>)
 80050e2:	f7ff bf0f 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 80050e6:	bf00      	nop
 80050e8:	200006d8 	.word	0x200006d8

080050ec <__malloc_unlock>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__malloc_unlock+0x8>)
 80050ee:	f7ff bf0a 	b.w	8004f06 <__retarget_lock_release_recursive>
 80050f2:	bf00      	nop
 80050f4:	200006d8 	.word	0x200006d8

080050f8 <__sfputc_r>:
 80050f8:	6893      	ldr	r3, [r2, #8]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	b410      	push	{r4}
 8005100:	6093      	str	r3, [r2, #8]
 8005102:	da08      	bge.n	8005116 <__sfputc_r+0x1e>
 8005104:	6994      	ldr	r4, [r2, #24]
 8005106:	42a3      	cmp	r3, r4
 8005108:	db01      	blt.n	800510e <__sfputc_r+0x16>
 800510a:	290a      	cmp	r1, #10
 800510c:	d103      	bne.n	8005116 <__sfputc_r+0x1e>
 800510e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005112:	f000 bb73 	b.w	80057fc <__swbuf_r>
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	1c58      	adds	r0, r3, #1
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	7019      	strb	r1, [r3, #0]
 800511e:	4608      	mov	r0, r1
 8005120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005124:	4770      	bx	lr

08005126 <__sfputs_r>:
 8005126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005128:	4606      	mov	r6, r0
 800512a:	460f      	mov	r7, r1
 800512c:	4614      	mov	r4, r2
 800512e:	18d5      	adds	r5, r2, r3
 8005130:	42ac      	cmp	r4, r5
 8005132:	d101      	bne.n	8005138 <__sfputs_r+0x12>
 8005134:	2000      	movs	r0, #0
 8005136:	e007      	b.n	8005148 <__sfputs_r+0x22>
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	463a      	mov	r2, r7
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff ffda 	bl	80050f8 <__sfputc_r>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d1f3      	bne.n	8005130 <__sfputs_r+0xa>
 8005148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800514c <_vfiprintf_r>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	460d      	mov	r5, r1
 8005152:	b09d      	sub	sp, #116	; 0x74
 8005154:	4614      	mov	r4, r2
 8005156:	4698      	mov	r8, r3
 8005158:	4606      	mov	r6, r0
 800515a:	b118      	cbz	r0, 8005164 <_vfiprintf_r+0x18>
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	b90b      	cbnz	r3, 8005164 <_vfiprintf_r+0x18>
 8005160:	f7ff fdcc 	bl	8004cfc <__sinit>
 8005164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005166:	07d9      	lsls	r1, r3, #31
 8005168:	d405      	bmi.n	8005176 <_vfiprintf_r+0x2a>
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	059a      	lsls	r2, r3, #22
 800516e:	d402      	bmi.n	8005176 <_vfiprintf_r+0x2a>
 8005170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005172:	f7ff fec7 	bl	8004f04 <__retarget_lock_acquire_recursive>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	071b      	lsls	r3, r3, #28
 800517a:	d501      	bpl.n	8005180 <_vfiprintf_r+0x34>
 800517c:	692b      	ldr	r3, [r5, #16]
 800517e:	b99b      	cbnz	r3, 80051a8 <_vfiprintf_r+0x5c>
 8005180:	4629      	mov	r1, r5
 8005182:	4630      	mov	r0, r6
 8005184:	f000 fb78 	bl	8005878 <__swsetup_r>
 8005188:	b170      	cbz	r0, 80051a8 <_vfiprintf_r+0x5c>
 800518a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800518c:	07dc      	lsls	r4, r3, #31
 800518e:	d504      	bpl.n	800519a <_vfiprintf_r+0x4e>
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	b01d      	add	sp, #116	; 0x74
 8005196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	0598      	lsls	r0, r3, #22
 800519e:	d4f7      	bmi.n	8005190 <_vfiprintf_r+0x44>
 80051a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051a2:	f7ff feb0 	bl	8004f06 <__retarget_lock_release_recursive>
 80051a6:	e7f3      	b.n	8005190 <_vfiprintf_r+0x44>
 80051a8:	2300      	movs	r3, #0
 80051aa:	9309      	str	r3, [sp, #36]	; 0x24
 80051ac:	2320      	movs	r3, #32
 80051ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b6:	2330      	movs	r3, #48	; 0x30
 80051b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800536c <_vfiprintf_r+0x220>
 80051bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051c0:	f04f 0901 	mov.w	r9, #1
 80051c4:	4623      	mov	r3, r4
 80051c6:	469a      	mov	sl, r3
 80051c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051cc:	b10a      	cbz	r2, 80051d2 <_vfiprintf_r+0x86>
 80051ce:	2a25      	cmp	r2, #37	; 0x25
 80051d0:	d1f9      	bne.n	80051c6 <_vfiprintf_r+0x7a>
 80051d2:	ebba 0b04 	subs.w	fp, sl, r4
 80051d6:	d00b      	beq.n	80051f0 <_vfiprintf_r+0xa4>
 80051d8:	465b      	mov	r3, fp
 80051da:	4622      	mov	r2, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	4630      	mov	r0, r6
 80051e0:	f7ff ffa1 	bl	8005126 <__sfputs_r>
 80051e4:	3001      	adds	r0, #1
 80051e6:	f000 80a9 	beq.w	800533c <_vfiprintf_r+0x1f0>
 80051ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ec:	445a      	add	r2, fp
 80051ee:	9209      	str	r2, [sp, #36]	; 0x24
 80051f0:	f89a 3000 	ldrb.w	r3, [sl]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80a1 	beq.w	800533c <_vfiprintf_r+0x1f0>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005204:	f10a 0a01 	add.w	sl, sl, #1
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	9307      	str	r3, [sp, #28]
 800520c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005210:	931a      	str	r3, [sp, #104]	; 0x68
 8005212:	4654      	mov	r4, sl
 8005214:	2205      	movs	r2, #5
 8005216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521a:	4854      	ldr	r0, [pc, #336]	; (800536c <_vfiprintf_r+0x220>)
 800521c:	f7fa ffd8 	bl	80001d0 <memchr>
 8005220:	9a04      	ldr	r2, [sp, #16]
 8005222:	b9d8      	cbnz	r0, 800525c <_vfiprintf_r+0x110>
 8005224:	06d1      	lsls	r1, r2, #27
 8005226:	bf44      	itt	mi
 8005228:	2320      	movmi	r3, #32
 800522a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522e:	0713      	lsls	r3, r2, #28
 8005230:	bf44      	itt	mi
 8005232:	232b      	movmi	r3, #43	; 0x2b
 8005234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005238:	f89a 3000 	ldrb.w	r3, [sl]
 800523c:	2b2a      	cmp	r3, #42	; 0x2a
 800523e:	d015      	beq.n	800526c <_vfiprintf_r+0x120>
 8005240:	9a07      	ldr	r2, [sp, #28]
 8005242:	4654      	mov	r4, sl
 8005244:	2000      	movs	r0, #0
 8005246:	f04f 0c0a 	mov.w	ip, #10
 800524a:	4621      	mov	r1, r4
 800524c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005250:	3b30      	subs	r3, #48	; 0x30
 8005252:	2b09      	cmp	r3, #9
 8005254:	d94d      	bls.n	80052f2 <_vfiprintf_r+0x1a6>
 8005256:	b1b0      	cbz	r0, 8005286 <_vfiprintf_r+0x13a>
 8005258:	9207      	str	r2, [sp, #28]
 800525a:	e014      	b.n	8005286 <_vfiprintf_r+0x13a>
 800525c:	eba0 0308 	sub.w	r3, r0, r8
 8005260:	fa09 f303 	lsl.w	r3, r9, r3
 8005264:	4313      	orrs	r3, r2
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	46a2      	mov	sl, r4
 800526a:	e7d2      	b.n	8005212 <_vfiprintf_r+0xc6>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	1d19      	adds	r1, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	9103      	str	r1, [sp, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	bfbb      	ittet	lt
 8005278:	425b      	neglt	r3, r3
 800527a:	f042 0202 	orrlt.w	r2, r2, #2
 800527e:	9307      	strge	r3, [sp, #28]
 8005280:	9307      	strlt	r3, [sp, #28]
 8005282:	bfb8      	it	lt
 8005284:	9204      	strlt	r2, [sp, #16]
 8005286:	7823      	ldrb	r3, [r4, #0]
 8005288:	2b2e      	cmp	r3, #46	; 0x2e
 800528a:	d10c      	bne.n	80052a6 <_vfiprintf_r+0x15a>
 800528c:	7863      	ldrb	r3, [r4, #1]
 800528e:	2b2a      	cmp	r3, #42	; 0x2a
 8005290:	d134      	bne.n	80052fc <_vfiprintf_r+0x1b0>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	1d1a      	adds	r2, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9203      	str	r2, [sp, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfb8      	it	lt
 800529e:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a2:	3402      	adds	r4, #2
 80052a4:	9305      	str	r3, [sp, #20]
 80052a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800537c <_vfiprintf_r+0x230>
 80052aa:	7821      	ldrb	r1, [r4, #0]
 80052ac:	2203      	movs	r2, #3
 80052ae:	4650      	mov	r0, sl
 80052b0:	f7fa ff8e 	bl	80001d0 <memchr>
 80052b4:	b138      	cbz	r0, 80052c6 <_vfiprintf_r+0x17a>
 80052b6:	9b04      	ldr	r3, [sp, #16]
 80052b8:	eba0 000a 	sub.w	r0, r0, sl
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	4082      	lsls	r2, r0
 80052c0:	4313      	orrs	r3, r2
 80052c2:	3401      	adds	r4, #1
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ca:	4829      	ldr	r0, [pc, #164]	; (8005370 <_vfiprintf_r+0x224>)
 80052cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052d0:	2206      	movs	r2, #6
 80052d2:	f7fa ff7d 	bl	80001d0 <memchr>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d03f      	beq.n	800535a <_vfiprintf_r+0x20e>
 80052da:	4b26      	ldr	r3, [pc, #152]	; (8005374 <_vfiprintf_r+0x228>)
 80052dc:	bb1b      	cbnz	r3, 8005326 <_vfiprintf_r+0x1da>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	3308      	adds	r3, #8
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ec:	443b      	add	r3, r7
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	e768      	b.n	80051c4 <_vfiprintf_r+0x78>
 80052f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f6:	460c      	mov	r4, r1
 80052f8:	2001      	movs	r0, #1
 80052fa:	e7a6      	b.n	800524a <_vfiprintf_r+0xfe>
 80052fc:	2300      	movs	r3, #0
 80052fe:	3401      	adds	r4, #1
 8005300:	9305      	str	r3, [sp, #20]
 8005302:	4619      	mov	r1, r3
 8005304:	f04f 0c0a 	mov.w	ip, #10
 8005308:	4620      	mov	r0, r4
 800530a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530e:	3a30      	subs	r2, #48	; 0x30
 8005310:	2a09      	cmp	r2, #9
 8005312:	d903      	bls.n	800531c <_vfiprintf_r+0x1d0>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0c6      	beq.n	80052a6 <_vfiprintf_r+0x15a>
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	e7c4      	b.n	80052a6 <_vfiprintf_r+0x15a>
 800531c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005320:	4604      	mov	r4, r0
 8005322:	2301      	movs	r3, #1
 8005324:	e7f0      	b.n	8005308 <_vfiprintf_r+0x1bc>
 8005326:	ab03      	add	r3, sp, #12
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	462a      	mov	r2, r5
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <_vfiprintf_r+0x22c>)
 800532e:	a904      	add	r1, sp, #16
 8005330:	4630      	mov	r0, r6
 8005332:	f3af 8000 	nop.w
 8005336:	4607      	mov	r7, r0
 8005338:	1c78      	adds	r0, r7, #1
 800533a:	d1d6      	bne.n	80052ea <_vfiprintf_r+0x19e>
 800533c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800533e:	07d9      	lsls	r1, r3, #31
 8005340:	d405      	bmi.n	800534e <_vfiprintf_r+0x202>
 8005342:	89ab      	ldrh	r3, [r5, #12]
 8005344:	059a      	lsls	r2, r3, #22
 8005346:	d402      	bmi.n	800534e <_vfiprintf_r+0x202>
 8005348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800534a:	f7ff fddc 	bl	8004f06 <__retarget_lock_release_recursive>
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	065b      	lsls	r3, r3, #25
 8005352:	f53f af1d 	bmi.w	8005190 <_vfiprintf_r+0x44>
 8005356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005358:	e71c      	b.n	8005194 <_vfiprintf_r+0x48>
 800535a:	ab03      	add	r3, sp, #12
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	462a      	mov	r2, r5
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <_vfiprintf_r+0x22c>)
 8005362:	a904      	add	r1, sp, #16
 8005364:	4630      	mov	r0, r6
 8005366:	f000 f879 	bl	800545c <_printf_i>
 800536a:	e7e4      	b.n	8005336 <_vfiprintf_r+0x1ea>
 800536c:	08006e18 	.word	0x08006e18
 8005370:	08006e22 	.word	0x08006e22
 8005374:	00000000 	.word	0x00000000
 8005378:	08005127 	.word	0x08005127
 800537c:	08006e1e 	.word	0x08006e1e

08005380 <_printf_common>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	4616      	mov	r6, r2
 8005386:	4699      	mov	r9, r3
 8005388:	688a      	ldr	r2, [r1, #8]
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005390:	4293      	cmp	r3, r2
 8005392:	bfb8      	it	lt
 8005394:	4613      	movlt	r3, r2
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800539c:	4607      	mov	r7, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	b10a      	cbz	r2, 80053a6 <_printf_common+0x26>
 80053a2:	3301      	adds	r3, #1
 80053a4:	6033      	str	r3, [r6, #0]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	0699      	lsls	r1, r3, #26
 80053aa:	bf42      	ittt	mi
 80053ac:	6833      	ldrmi	r3, [r6, #0]
 80053ae:	3302      	addmi	r3, #2
 80053b0:	6033      	strmi	r3, [r6, #0]
 80053b2:	6825      	ldr	r5, [r4, #0]
 80053b4:	f015 0506 	ands.w	r5, r5, #6
 80053b8:	d106      	bne.n	80053c8 <_printf_common+0x48>
 80053ba:	f104 0a19 	add.w	sl, r4, #25
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	6832      	ldr	r2, [r6, #0]
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dc26      	bgt.n	8005416 <_printf_common+0x96>
 80053c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053cc:	1e13      	subs	r3, r2, #0
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	0692      	lsls	r2, r2, #26
 80053d6:	d42b      	bmi.n	8005430 <_printf_common+0xb0>
 80053d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053dc:	4649      	mov	r1, r9
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d01e      	beq.n	8005424 <_printf_common+0xa4>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	6922      	ldr	r2, [r4, #16]
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	bf02      	ittt	eq
 80053f2:	68e5      	ldreq	r5, [r4, #12]
 80053f4:	6833      	ldreq	r3, [r6, #0]
 80053f6:	1aed      	subeq	r5, r5, r3
 80053f8:	68a3      	ldr	r3, [r4, #8]
 80053fa:	bf0c      	ite	eq
 80053fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005400:	2500      	movne	r5, #0
 8005402:	4293      	cmp	r3, r2
 8005404:	bfc4      	itt	gt
 8005406:	1a9b      	subgt	r3, r3, r2
 8005408:	18ed      	addgt	r5, r5, r3
 800540a:	2600      	movs	r6, #0
 800540c:	341a      	adds	r4, #26
 800540e:	42b5      	cmp	r5, r6
 8005410:	d11a      	bne.n	8005448 <_printf_common+0xc8>
 8005412:	2000      	movs	r0, #0
 8005414:	e008      	b.n	8005428 <_printf_common+0xa8>
 8005416:	2301      	movs	r3, #1
 8005418:	4652      	mov	r2, sl
 800541a:	4649      	mov	r1, r9
 800541c:	4638      	mov	r0, r7
 800541e:	47c0      	blx	r8
 8005420:	3001      	adds	r0, #1
 8005422:	d103      	bne.n	800542c <_printf_common+0xac>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	3501      	adds	r5, #1
 800542e:	e7c6      	b.n	80053be <_printf_common+0x3e>
 8005430:	18e1      	adds	r1, r4, r3
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	2030      	movs	r0, #48	; 0x30
 8005436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800543a:	4422      	add	r2, r4
 800543c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005444:	3302      	adds	r3, #2
 8005446:	e7c7      	b.n	80053d8 <_printf_common+0x58>
 8005448:	2301      	movs	r3, #1
 800544a:	4622      	mov	r2, r4
 800544c:	4649      	mov	r1, r9
 800544e:	4638      	mov	r0, r7
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d0e6      	beq.n	8005424 <_printf_common+0xa4>
 8005456:	3601      	adds	r6, #1
 8005458:	e7d9      	b.n	800540e <_printf_common+0x8e>
	...

0800545c <_printf_i>:
 800545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	7e0f      	ldrb	r7, [r1, #24]
 8005462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005464:	2f78      	cmp	r7, #120	; 0x78
 8005466:	4691      	mov	r9, r2
 8005468:	4680      	mov	r8, r0
 800546a:	460c      	mov	r4, r1
 800546c:	469a      	mov	sl, r3
 800546e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005472:	d807      	bhi.n	8005484 <_printf_i+0x28>
 8005474:	2f62      	cmp	r7, #98	; 0x62
 8005476:	d80a      	bhi.n	800548e <_printf_i+0x32>
 8005478:	2f00      	cmp	r7, #0
 800547a:	f000 80d4 	beq.w	8005626 <_printf_i+0x1ca>
 800547e:	2f58      	cmp	r7, #88	; 0x58
 8005480:	f000 80c0 	beq.w	8005604 <_printf_i+0x1a8>
 8005484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800548c:	e03a      	b.n	8005504 <_printf_i+0xa8>
 800548e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005492:	2b15      	cmp	r3, #21
 8005494:	d8f6      	bhi.n	8005484 <_printf_i+0x28>
 8005496:	a101      	add	r1, pc, #4	; (adr r1, 800549c <_printf_i+0x40>)
 8005498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	08005509 	.word	0x08005509
 80054a4:	08005485 	.word	0x08005485
 80054a8:	08005485 	.word	0x08005485
 80054ac:	08005485 	.word	0x08005485
 80054b0:	08005485 	.word	0x08005485
 80054b4:	08005509 	.word	0x08005509
 80054b8:	08005485 	.word	0x08005485
 80054bc:	08005485 	.word	0x08005485
 80054c0:	08005485 	.word	0x08005485
 80054c4:	08005485 	.word	0x08005485
 80054c8:	0800560d 	.word	0x0800560d
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080055c7 	.word	0x080055c7
 80054d4:	08005485 	.word	0x08005485
 80054d8:	08005485 	.word	0x08005485
 80054dc:	0800562f 	.word	0x0800562f
 80054e0:	08005485 	.word	0x08005485
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005485 	.word	0x08005485
 80054ec:	08005485 	.word	0x08005485
 80054f0:	080055cf 	.word	0x080055cf
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005504:	2301      	movs	r3, #1
 8005506:	e09f      	b.n	8005648 <_printf_i+0x1ec>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	0607      	lsls	r7, r0, #24
 800550e:	f103 0104 	add.w	r1, r3, #4
 8005512:	6029      	str	r1, [r5, #0]
 8005514:	d501      	bpl.n	800551a <_printf_i+0xbe>
 8005516:	681e      	ldr	r6, [r3, #0]
 8005518:	e003      	b.n	8005522 <_printf_i+0xc6>
 800551a:	0646      	lsls	r6, r0, #25
 800551c:	d5fb      	bpl.n	8005516 <_printf_i+0xba>
 800551e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005522:	2e00      	cmp	r6, #0
 8005524:	da03      	bge.n	800552e <_printf_i+0xd2>
 8005526:	232d      	movs	r3, #45	; 0x2d
 8005528:	4276      	negs	r6, r6
 800552a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552e:	485a      	ldr	r0, [pc, #360]	; (8005698 <_printf_i+0x23c>)
 8005530:	230a      	movs	r3, #10
 8005532:	e012      	b.n	800555a <_printf_i+0xfe>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	6029      	str	r1, [r5, #0]
 800553c:	0605      	lsls	r5, r0, #24
 800553e:	d501      	bpl.n	8005544 <_printf_i+0xe8>
 8005540:	681e      	ldr	r6, [r3, #0]
 8005542:	e002      	b.n	800554a <_printf_i+0xee>
 8005544:	0641      	lsls	r1, r0, #25
 8005546:	d5fb      	bpl.n	8005540 <_printf_i+0xe4>
 8005548:	881e      	ldrh	r6, [r3, #0]
 800554a:	4853      	ldr	r0, [pc, #332]	; (8005698 <_printf_i+0x23c>)
 800554c:	2f6f      	cmp	r7, #111	; 0x6f
 800554e:	bf0c      	ite	eq
 8005550:	2308      	moveq	r3, #8
 8005552:	230a      	movne	r3, #10
 8005554:	2100      	movs	r1, #0
 8005556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800555a:	6865      	ldr	r5, [r4, #4]
 800555c:	60a5      	str	r5, [r4, #8]
 800555e:	2d00      	cmp	r5, #0
 8005560:	bfa2      	ittt	ge
 8005562:	6821      	ldrge	r1, [r4, #0]
 8005564:	f021 0104 	bicge.w	r1, r1, #4
 8005568:	6021      	strge	r1, [r4, #0]
 800556a:	b90e      	cbnz	r6, 8005570 <_printf_i+0x114>
 800556c:	2d00      	cmp	r5, #0
 800556e:	d04b      	beq.n	8005608 <_printf_i+0x1ac>
 8005570:	4615      	mov	r5, r2
 8005572:	fbb6 f1f3 	udiv	r1, r6, r3
 8005576:	fb03 6711 	mls	r7, r3, r1, r6
 800557a:	5dc7      	ldrb	r7, [r0, r7]
 800557c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005580:	4637      	mov	r7, r6
 8005582:	42bb      	cmp	r3, r7
 8005584:	460e      	mov	r6, r1
 8005586:	d9f4      	bls.n	8005572 <_printf_i+0x116>
 8005588:	2b08      	cmp	r3, #8
 800558a:	d10b      	bne.n	80055a4 <_printf_i+0x148>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	07de      	lsls	r6, r3, #31
 8005590:	d508      	bpl.n	80055a4 <_printf_i+0x148>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	6861      	ldr	r1, [r4, #4]
 8005596:	4299      	cmp	r1, r3
 8005598:	bfde      	ittt	le
 800559a:	2330      	movle	r3, #48	; 0x30
 800559c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055a4:	1b52      	subs	r2, r2, r5
 80055a6:	6122      	str	r2, [r4, #16]
 80055a8:	f8cd a000 	str.w	sl, [sp]
 80055ac:	464b      	mov	r3, r9
 80055ae:	aa03      	add	r2, sp, #12
 80055b0:	4621      	mov	r1, r4
 80055b2:	4640      	mov	r0, r8
 80055b4:	f7ff fee4 	bl	8005380 <_printf_common>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d14a      	bne.n	8005652 <_printf_i+0x1f6>
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	b004      	add	sp, #16
 80055c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	f043 0320 	orr.w	r3, r3, #32
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	4833      	ldr	r0, [pc, #204]	; (800569c <_printf_i+0x240>)
 80055d0:	2778      	movs	r7, #120	; 0x78
 80055d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	6829      	ldr	r1, [r5, #0]
 80055da:	061f      	lsls	r7, r3, #24
 80055dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80055e0:	d402      	bmi.n	80055e8 <_printf_i+0x18c>
 80055e2:	065f      	lsls	r7, r3, #25
 80055e4:	bf48      	it	mi
 80055e6:	b2b6      	uxthmi	r6, r6
 80055e8:	07df      	lsls	r7, r3, #31
 80055ea:	bf48      	it	mi
 80055ec:	f043 0320 	orrmi.w	r3, r3, #32
 80055f0:	6029      	str	r1, [r5, #0]
 80055f2:	bf48      	it	mi
 80055f4:	6023      	strmi	r3, [r4, #0]
 80055f6:	b91e      	cbnz	r6, 8005600 <_printf_i+0x1a4>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	f023 0320 	bic.w	r3, r3, #32
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	2310      	movs	r3, #16
 8005602:	e7a7      	b.n	8005554 <_printf_i+0xf8>
 8005604:	4824      	ldr	r0, [pc, #144]	; (8005698 <_printf_i+0x23c>)
 8005606:	e7e4      	b.n	80055d2 <_printf_i+0x176>
 8005608:	4615      	mov	r5, r2
 800560a:	e7bd      	b.n	8005588 <_printf_i+0x12c>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	6826      	ldr	r6, [r4, #0]
 8005610:	6961      	ldr	r1, [r4, #20]
 8005612:	1d18      	adds	r0, r3, #4
 8005614:	6028      	str	r0, [r5, #0]
 8005616:	0635      	lsls	r5, r6, #24
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	d501      	bpl.n	8005620 <_printf_i+0x1c4>
 800561c:	6019      	str	r1, [r3, #0]
 800561e:	e002      	b.n	8005626 <_printf_i+0x1ca>
 8005620:	0670      	lsls	r0, r6, #25
 8005622:	d5fb      	bpl.n	800561c <_printf_i+0x1c0>
 8005624:	8019      	strh	r1, [r3, #0]
 8005626:	2300      	movs	r3, #0
 8005628:	6123      	str	r3, [r4, #16]
 800562a:	4615      	mov	r5, r2
 800562c:	e7bc      	b.n	80055a8 <_printf_i+0x14c>
 800562e:	682b      	ldr	r3, [r5, #0]
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	602a      	str	r2, [r5, #0]
 8005634:	681d      	ldr	r5, [r3, #0]
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	2100      	movs	r1, #0
 800563a:	4628      	mov	r0, r5
 800563c:	f7fa fdc8 	bl	80001d0 <memchr>
 8005640:	b108      	cbz	r0, 8005646 <_printf_i+0x1ea>
 8005642:	1b40      	subs	r0, r0, r5
 8005644:	6060      	str	r0, [r4, #4]
 8005646:	6863      	ldr	r3, [r4, #4]
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	2300      	movs	r3, #0
 800564c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005650:	e7aa      	b.n	80055a8 <_printf_i+0x14c>
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	462a      	mov	r2, r5
 8005656:	4649      	mov	r1, r9
 8005658:	4640      	mov	r0, r8
 800565a:	47d0      	blx	sl
 800565c:	3001      	adds	r0, #1
 800565e:	d0ad      	beq.n	80055bc <_printf_i+0x160>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	079b      	lsls	r3, r3, #30
 8005664:	d413      	bmi.n	800568e <_printf_i+0x232>
 8005666:	68e0      	ldr	r0, [r4, #12]
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	4298      	cmp	r0, r3
 800566c:	bfb8      	it	lt
 800566e:	4618      	movlt	r0, r3
 8005670:	e7a6      	b.n	80055c0 <_printf_i+0x164>
 8005672:	2301      	movs	r3, #1
 8005674:	4632      	mov	r2, r6
 8005676:	4649      	mov	r1, r9
 8005678:	4640      	mov	r0, r8
 800567a:	47d0      	blx	sl
 800567c:	3001      	adds	r0, #1
 800567e:	d09d      	beq.n	80055bc <_printf_i+0x160>
 8005680:	3501      	adds	r5, #1
 8005682:	68e3      	ldr	r3, [r4, #12]
 8005684:	9903      	ldr	r1, [sp, #12]
 8005686:	1a5b      	subs	r3, r3, r1
 8005688:	42ab      	cmp	r3, r5
 800568a:	dcf2      	bgt.n	8005672 <_printf_i+0x216>
 800568c:	e7eb      	b.n	8005666 <_printf_i+0x20a>
 800568e:	2500      	movs	r5, #0
 8005690:	f104 0619 	add.w	r6, r4, #25
 8005694:	e7f5      	b.n	8005682 <_printf_i+0x226>
 8005696:	bf00      	nop
 8005698:	08006e29 	.word	0x08006e29
 800569c:	08006e3a 	.word	0x08006e3a

080056a0 <__sflush_r>:
 80056a0:	898a      	ldrh	r2, [r1, #12]
 80056a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a6:	4605      	mov	r5, r0
 80056a8:	0710      	lsls	r0, r2, #28
 80056aa:	460c      	mov	r4, r1
 80056ac:	d458      	bmi.n	8005760 <__sflush_r+0xc0>
 80056ae:	684b      	ldr	r3, [r1, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dc05      	bgt.n	80056c0 <__sflush_r+0x20>
 80056b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dc02      	bgt.n	80056c0 <__sflush_r+0x20>
 80056ba:	2000      	movs	r0, #0
 80056bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	d0f9      	beq.n	80056ba <__sflush_r+0x1a>
 80056c6:	2300      	movs	r3, #0
 80056c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056cc:	682f      	ldr	r7, [r5, #0]
 80056ce:	6a21      	ldr	r1, [r4, #32]
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	d032      	beq.n	800573a <__sflush_r+0x9a>
 80056d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	075a      	lsls	r2, r3, #29
 80056da:	d505      	bpl.n	80056e8 <__sflush_r+0x48>
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	1ac0      	subs	r0, r0, r3
 80056e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056e2:	b10b      	cbz	r3, 80056e8 <__sflush_r+0x48>
 80056e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056e6:	1ac0      	subs	r0, r0, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	4602      	mov	r2, r0
 80056ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ee:	6a21      	ldr	r1, [r4, #32]
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b0      	blx	r6
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	d106      	bne.n	8005708 <__sflush_r+0x68>
 80056fa:	6829      	ldr	r1, [r5, #0]
 80056fc:	291d      	cmp	r1, #29
 80056fe:	d82b      	bhi.n	8005758 <__sflush_r+0xb8>
 8005700:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <__sflush_r+0x108>)
 8005702:	410a      	asrs	r2, r1
 8005704:	07d6      	lsls	r6, r2, #31
 8005706:	d427      	bmi.n	8005758 <__sflush_r+0xb8>
 8005708:	2200      	movs	r2, #0
 800570a:	6062      	str	r2, [r4, #4]
 800570c:	04d9      	lsls	r1, r3, #19
 800570e:	6922      	ldr	r2, [r4, #16]
 8005710:	6022      	str	r2, [r4, #0]
 8005712:	d504      	bpl.n	800571e <__sflush_r+0x7e>
 8005714:	1c42      	adds	r2, r0, #1
 8005716:	d101      	bne.n	800571c <__sflush_r+0x7c>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b903      	cbnz	r3, 800571e <__sflush_r+0x7e>
 800571c:	6560      	str	r0, [r4, #84]	; 0x54
 800571e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005720:	602f      	str	r7, [r5, #0]
 8005722:	2900      	cmp	r1, #0
 8005724:	d0c9      	beq.n	80056ba <__sflush_r+0x1a>
 8005726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800572a:	4299      	cmp	r1, r3
 800572c:	d002      	beq.n	8005734 <__sflush_r+0x94>
 800572e:	4628      	mov	r0, r5
 8005730:	f7ff fbea 	bl	8004f08 <_free_r>
 8005734:	2000      	movs	r0, #0
 8005736:	6360      	str	r0, [r4, #52]	; 0x34
 8005738:	e7c0      	b.n	80056bc <__sflush_r+0x1c>
 800573a:	2301      	movs	r3, #1
 800573c:	4628      	mov	r0, r5
 800573e:	47b0      	blx	r6
 8005740:	1c41      	adds	r1, r0, #1
 8005742:	d1c8      	bne.n	80056d6 <__sflush_r+0x36>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0c5      	beq.n	80056d6 <__sflush_r+0x36>
 800574a:	2b1d      	cmp	r3, #29
 800574c:	d001      	beq.n	8005752 <__sflush_r+0xb2>
 800574e:	2b16      	cmp	r3, #22
 8005750:	d101      	bne.n	8005756 <__sflush_r+0xb6>
 8005752:	602f      	str	r7, [r5, #0]
 8005754:	e7b1      	b.n	80056ba <__sflush_r+0x1a>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575c:	81a3      	strh	r3, [r4, #12]
 800575e:	e7ad      	b.n	80056bc <__sflush_r+0x1c>
 8005760:	690f      	ldr	r7, [r1, #16]
 8005762:	2f00      	cmp	r7, #0
 8005764:	d0a9      	beq.n	80056ba <__sflush_r+0x1a>
 8005766:	0793      	lsls	r3, r2, #30
 8005768:	680e      	ldr	r6, [r1, #0]
 800576a:	bf08      	it	eq
 800576c:	694b      	ldreq	r3, [r1, #20]
 800576e:	600f      	str	r7, [r1, #0]
 8005770:	bf18      	it	ne
 8005772:	2300      	movne	r3, #0
 8005774:	eba6 0807 	sub.w	r8, r6, r7
 8005778:	608b      	str	r3, [r1, #8]
 800577a:	f1b8 0f00 	cmp.w	r8, #0
 800577e:	dd9c      	ble.n	80056ba <__sflush_r+0x1a>
 8005780:	6a21      	ldr	r1, [r4, #32]
 8005782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005784:	4643      	mov	r3, r8
 8005786:	463a      	mov	r2, r7
 8005788:	4628      	mov	r0, r5
 800578a:	47b0      	blx	r6
 800578c:	2800      	cmp	r0, #0
 800578e:	dc06      	bgt.n	800579e <__sflush_r+0xfe>
 8005790:	89a3      	ldrh	r3, [r4, #12]
 8005792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	e78e      	b.n	80056bc <__sflush_r+0x1c>
 800579e:	4407      	add	r7, r0
 80057a0:	eba8 0800 	sub.w	r8, r8, r0
 80057a4:	e7e9      	b.n	800577a <__sflush_r+0xda>
 80057a6:	bf00      	nop
 80057a8:	dfbffffe 	.word	0xdfbffffe

080057ac <_fflush_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	690b      	ldr	r3, [r1, #16]
 80057b0:	4605      	mov	r5, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	b913      	cbnz	r3, 80057bc <_fflush_r+0x10>
 80057b6:	2500      	movs	r5, #0
 80057b8:	4628      	mov	r0, r5
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	b118      	cbz	r0, 80057c6 <_fflush_r+0x1a>
 80057be:	6a03      	ldr	r3, [r0, #32]
 80057c0:	b90b      	cbnz	r3, 80057c6 <_fflush_r+0x1a>
 80057c2:	f7ff fa9b 	bl	8004cfc <__sinit>
 80057c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f3      	beq.n	80057b6 <_fflush_r+0xa>
 80057ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057d0:	07d0      	lsls	r0, r2, #31
 80057d2:	d404      	bmi.n	80057de <_fflush_r+0x32>
 80057d4:	0599      	lsls	r1, r3, #22
 80057d6:	d402      	bmi.n	80057de <_fflush_r+0x32>
 80057d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057da:	f7ff fb93 	bl	8004f04 <__retarget_lock_acquire_recursive>
 80057de:	4628      	mov	r0, r5
 80057e0:	4621      	mov	r1, r4
 80057e2:	f7ff ff5d 	bl	80056a0 <__sflush_r>
 80057e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057e8:	07da      	lsls	r2, r3, #31
 80057ea:	4605      	mov	r5, r0
 80057ec:	d4e4      	bmi.n	80057b8 <_fflush_r+0xc>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	059b      	lsls	r3, r3, #22
 80057f2:	d4e1      	bmi.n	80057b8 <_fflush_r+0xc>
 80057f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057f6:	f7ff fb86 	bl	8004f06 <__retarget_lock_release_recursive>
 80057fa:	e7dd      	b.n	80057b8 <_fflush_r+0xc>

080057fc <__swbuf_r>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	460e      	mov	r6, r1
 8005800:	4614      	mov	r4, r2
 8005802:	4605      	mov	r5, r0
 8005804:	b118      	cbz	r0, 800580e <__swbuf_r+0x12>
 8005806:	6a03      	ldr	r3, [r0, #32]
 8005808:	b90b      	cbnz	r3, 800580e <__swbuf_r+0x12>
 800580a:	f7ff fa77 	bl	8004cfc <__sinit>
 800580e:	69a3      	ldr	r3, [r4, #24]
 8005810:	60a3      	str	r3, [r4, #8]
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	071a      	lsls	r2, r3, #28
 8005816:	d525      	bpl.n	8005864 <__swbuf_r+0x68>
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	b31b      	cbz	r3, 8005864 <__swbuf_r+0x68>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	6922      	ldr	r2, [r4, #16]
 8005820:	1a98      	subs	r0, r3, r2
 8005822:	6963      	ldr	r3, [r4, #20]
 8005824:	b2f6      	uxtb	r6, r6
 8005826:	4283      	cmp	r3, r0
 8005828:	4637      	mov	r7, r6
 800582a:	dc04      	bgt.n	8005836 <__swbuf_r+0x3a>
 800582c:	4621      	mov	r1, r4
 800582e:	4628      	mov	r0, r5
 8005830:	f7ff ffbc 	bl	80057ac <_fflush_r>
 8005834:	b9e0      	cbnz	r0, 8005870 <__swbuf_r+0x74>
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	3b01      	subs	r3, #1
 800583a:	60a3      	str	r3, [r4, #8]
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	6022      	str	r2, [r4, #0]
 8005842:	701e      	strb	r6, [r3, #0]
 8005844:	6962      	ldr	r2, [r4, #20]
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	429a      	cmp	r2, r3
 800584a:	d004      	beq.n	8005856 <__swbuf_r+0x5a>
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	07db      	lsls	r3, r3, #31
 8005850:	d506      	bpl.n	8005860 <__swbuf_r+0x64>
 8005852:	2e0a      	cmp	r6, #10
 8005854:	d104      	bne.n	8005860 <__swbuf_r+0x64>
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f7ff ffa7 	bl	80057ac <_fflush_r>
 800585e:	b938      	cbnz	r0, 8005870 <__swbuf_r+0x74>
 8005860:	4638      	mov	r0, r7
 8005862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005864:	4621      	mov	r1, r4
 8005866:	4628      	mov	r0, r5
 8005868:	f000 f806 	bl	8005878 <__swsetup_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	d0d5      	beq.n	800581c <__swbuf_r+0x20>
 8005870:	f04f 37ff 	mov.w	r7, #4294967295
 8005874:	e7f4      	b.n	8005860 <__swbuf_r+0x64>
	...

08005878 <__swsetup_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <__swsetup_r+0xac>)
 800587c:	4605      	mov	r5, r0
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	460c      	mov	r4, r1
 8005882:	b118      	cbz	r0, 800588c <__swsetup_r+0x14>
 8005884:	6a03      	ldr	r3, [r0, #32]
 8005886:	b90b      	cbnz	r3, 800588c <__swsetup_r+0x14>
 8005888:	f7ff fa38 	bl	8004cfc <__sinit>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005892:	0718      	lsls	r0, r3, #28
 8005894:	d422      	bmi.n	80058dc <__swsetup_r+0x64>
 8005896:	06d9      	lsls	r1, r3, #27
 8005898:	d407      	bmi.n	80058aa <__swsetup_r+0x32>
 800589a:	2309      	movs	r3, #9
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	e034      	b.n	8005914 <__swsetup_r+0x9c>
 80058aa:	0758      	lsls	r0, r3, #29
 80058ac:	d512      	bpl.n	80058d4 <__swsetup_r+0x5c>
 80058ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058b0:	b141      	cbz	r1, 80058c4 <__swsetup_r+0x4c>
 80058b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d002      	beq.n	80058c0 <__swsetup_r+0x48>
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff fb24 	bl	8004f08 <_free_r>
 80058c0:	2300      	movs	r3, #0
 80058c2:	6363      	str	r3, [r4, #52]	; 0x34
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	2300      	movs	r3, #0
 80058ce:	6063      	str	r3, [r4, #4]
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f043 0308 	orr.w	r3, r3, #8
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	b94b      	cbnz	r3, 80058f4 <__swsetup_r+0x7c>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ea:	d003      	beq.n	80058f4 <__swsetup_r+0x7c>
 80058ec:	4621      	mov	r1, r4
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 f850 	bl	8005994 <__smakebuf_r>
 80058f4:	89a0      	ldrh	r0, [r4, #12]
 80058f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058fa:	f010 0301 	ands.w	r3, r0, #1
 80058fe:	d00a      	beq.n	8005916 <__swsetup_r+0x9e>
 8005900:	2300      	movs	r3, #0
 8005902:	60a3      	str	r3, [r4, #8]
 8005904:	6963      	ldr	r3, [r4, #20]
 8005906:	425b      	negs	r3, r3
 8005908:	61a3      	str	r3, [r4, #24]
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	b943      	cbnz	r3, 8005920 <__swsetup_r+0xa8>
 800590e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005912:	d1c4      	bne.n	800589e <__swsetup_r+0x26>
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	0781      	lsls	r1, r0, #30
 8005918:	bf58      	it	pl
 800591a:	6963      	ldrpl	r3, [r4, #20]
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	e7f4      	b.n	800590a <__swsetup_r+0x92>
 8005920:	2000      	movs	r0, #0
 8005922:	e7f7      	b.n	8005914 <__swsetup_r+0x9c>
 8005924:	2000006c 	.word	0x2000006c

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb f92a 	bl	8000b8c <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200006d4 	.word	0x200006d4

08005948 <__swhatbuf_r>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	2900      	cmp	r1, #0
 8005952:	b096      	sub	sp, #88	; 0x58
 8005954:	4615      	mov	r5, r2
 8005956:	461e      	mov	r6, r3
 8005958:	da0d      	bge.n	8005976 <__swhatbuf_r+0x2e>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	bf0c      	ite	eq
 8005966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800596a:	2340      	movne	r3, #64	; 0x40
 800596c:	2000      	movs	r0, #0
 800596e:	6031      	str	r1, [r6, #0]
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	b016      	add	sp, #88	; 0x58
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	466a      	mov	r2, sp
 8005978:	f000 f848 	bl	8005a0c <_fstat_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	dbec      	blt.n	800595a <__swhatbuf_r+0x12>
 8005980:	9901      	ldr	r1, [sp, #4]
 8005982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800598a:	4259      	negs	r1, r3
 800598c:	4159      	adcs	r1, r3
 800598e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005992:	e7eb      	b.n	800596c <__swhatbuf_r+0x24>

08005994 <__smakebuf_r>:
 8005994:	898b      	ldrh	r3, [r1, #12]
 8005996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005998:	079d      	lsls	r5, r3, #30
 800599a:	4606      	mov	r6, r0
 800599c:	460c      	mov	r4, r1
 800599e:	d507      	bpl.n	80059b0 <__smakebuf_r+0x1c>
 80059a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	2301      	movs	r3, #1
 80059aa:	6163      	str	r3, [r4, #20]
 80059ac:	b002      	add	sp, #8
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	ab01      	add	r3, sp, #4
 80059b2:	466a      	mov	r2, sp
 80059b4:	f7ff ffc8 	bl	8005948 <__swhatbuf_r>
 80059b8:	9900      	ldr	r1, [sp, #0]
 80059ba:	4605      	mov	r5, r0
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fb0f 	bl	8004fe0 <_malloc_r>
 80059c2:	b948      	cbnz	r0, 80059d8 <__smakebuf_r+0x44>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	059a      	lsls	r2, r3, #22
 80059ca:	d4ef      	bmi.n	80059ac <__smakebuf_r+0x18>
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	e7e3      	b.n	80059a0 <__smakebuf_r+0xc>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	6020      	str	r0, [r4, #0]
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	9b00      	ldr	r3, [sp, #0]
 80059e4:	6163      	str	r3, [r4, #20]
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	6120      	str	r0, [r4, #16]
 80059ea:	b15b      	cbz	r3, 8005a04 <__smakebuf_r+0x70>
 80059ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f0:	4630      	mov	r0, r6
 80059f2:	f000 f81d 	bl	8005a30 <_isatty_r>
 80059f6:	b128      	cbz	r0, 8005a04 <__smakebuf_r+0x70>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	431d      	orrs	r5, r3
 8005a08:	81a5      	strh	r5, [r4, #12]
 8005a0a:	e7cf      	b.n	80059ac <__smakebuf_r+0x18>

08005a0c <_fstat_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	; (8005a2c <_fstat_r+0x20>)
 8005a10:	2300      	movs	r3, #0
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	f7fb f88e 	bl	8000b3a <_fstat>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d102      	bne.n	8005a28 <_fstat_r+0x1c>
 8005a22:	682b      	ldr	r3, [r5, #0]
 8005a24:	b103      	cbz	r3, 8005a28 <_fstat_r+0x1c>
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200006d4 	.word	0x200006d4

08005a30 <_isatty_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d06      	ldr	r5, [pc, #24]	; (8005a4c <_isatty_r+0x1c>)
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	602b      	str	r3, [r5, #0]
 8005a3c:	f7fb f88d 	bl	8000b5a <_isatty>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_isatty_r+0x1a>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_isatty_r+0x1a>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	200006d4 	.word	0x200006d4

08005a50 <_init>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr

08005a5c <_fini>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr
